
MPU6050V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c68  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f4  080051f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051fc  080051fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005200  08005200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000016c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000079e9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014b3  00000000  00000000  00027a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00028f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000678  00000000  00000000  00029658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd2d  00000000  00000000  00029cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000970f  00000000  00000000  000499fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c325b  00000000  00000000  0005310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116367  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002118  00000000  00000000  001163b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004dd8 	.word	0x08004dd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08004dd8 	.word	0x08004dd8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b974 	b.w	80008e0 <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9d08      	ldr	r5, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	468e      	mov	lr, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14d      	bne.n	80006ba <__udivmoddi4+0xaa>
 800061e:	428a      	cmp	r2, r1
 8000620:	4694      	mov	ip, r2
 8000622:	d969      	bls.n	80006f8 <__udivmoddi4+0xe8>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b152      	cbz	r2, 8000640 <__udivmoddi4+0x30>
 800062a:	fa01 f302 	lsl.w	r3, r1, r2
 800062e:	f1c2 0120 	rsb	r1, r2, #32
 8000632:	fa20 f101 	lsr.w	r1, r0, r1
 8000636:	fa0c fc02 	lsl.w	ip, ip, r2
 800063a:	ea41 0e03 	orr.w	lr, r1, r3
 800063e:	4094      	lsls	r4, r2
 8000640:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000644:	0c21      	lsrs	r1, r4, #16
 8000646:	fbbe f6f8 	udiv	r6, lr, r8
 800064a:	fa1f f78c 	uxth.w	r7, ip
 800064e:	fb08 e316 	mls	r3, r8, r6, lr
 8000652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000656:	fb06 f107 	mul.w	r1, r6, r7
 800065a:	4299      	cmp	r1, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x64>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f106 30ff 	add.w	r0, r6, #4294967295
 8000666:	f080 811f 	bcs.w	80008a8 <__udivmoddi4+0x298>
 800066a:	4299      	cmp	r1, r3
 800066c:	f240 811c 	bls.w	80008a8 <__udivmoddi4+0x298>
 8000670:	3e02      	subs	r6, #2
 8000672:	4463      	add	r3, ip
 8000674:	1a5b      	subs	r3, r3, r1
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb3 f0f8 	udiv	r0, r3, r8
 800067c:	fb08 3310 	mls	r3, r8, r0, r3
 8000680:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000684:	fb00 f707 	mul.w	r7, r0, r7
 8000688:	42a7      	cmp	r7, r4
 800068a:	d90a      	bls.n	80006a2 <__udivmoddi4+0x92>
 800068c:	eb1c 0404 	adds.w	r4, ip, r4
 8000690:	f100 33ff 	add.w	r3, r0, #4294967295
 8000694:	f080 810a 	bcs.w	80008ac <__udivmoddi4+0x29c>
 8000698:	42a7      	cmp	r7, r4
 800069a:	f240 8107 	bls.w	80008ac <__udivmoddi4+0x29c>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a6:	1be4      	subs	r4, r4, r7
 80006a8:	2600      	movs	r6, #0
 80006aa:	b11d      	cbz	r5, 80006b4 <__udivmoddi4+0xa4>
 80006ac:	40d4      	lsrs	r4, r2
 80006ae:	2300      	movs	r3, #0
 80006b0:	e9c5 4300 	strd	r4, r3, [r5]
 80006b4:	4631      	mov	r1, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0xc2>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	f000 80ef 	beq.w	80008a2 <__udivmoddi4+0x292>
 80006c4:	2600      	movs	r6, #0
 80006c6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ca:	4630      	mov	r0, r6
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	fab3 f683 	clz	r6, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d14a      	bne.n	8000770 <__udivmoddi4+0x160>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xd4>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80f9 	bhi.w	80008d6 <__udivmoddi4+0x2c6>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	469e      	mov	lr, r3
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0e0      	beq.n	80006b4 <__udivmoddi4+0xa4>
 80006f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006f6:	e7dd      	b.n	80006b4 <__udivmoddi4+0xa4>
 80006f8:	b902      	cbnz	r2, 80006fc <__udivmoddi4+0xec>
 80006fa:	deff      	udf	#255	; 0xff
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	2a00      	cmp	r2, #0
 8000702:	f040 8092 	bne.w	800082a <__udivmoddi4+0x21a>
 8000706:	eba1 010c 	sub.w	r1, r1, ip
 800070a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800070e:	fa1f fe8c 	uxth.w	lr, ip
 8000712:	2601      	movs	r6, #1
 8000714:	0c20      	lsrs	r0, r4, #16
 8000716:	fbb1 f3f7 	udiv	r3, r1, r7
 800071a:	fb07 1113 	mls	r1, r7, r3, r1
 800071e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000722:	fb0e f003 	mul.w	r0, lr, r3
 8000726:	4288      	cmp	r0, r1
 8000728:	d908      	bls.n	800073c <__udivmoddi4+0x12c>
 800072a:	eb1c 0101 	adds.w	r1, ip, r1
 800072e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x12a>
 8000734:	4288      	cmp	r0, r1
 8000736:	f200 80cb 	bhi.w	80008d0 <__udivmoddi4+0x2c0>
 800073a:	4643      	mov	r3, r8
 800073c:	1a09      	subs	r1, r1, r0
 800073e:	b2a4      	uxth	r4, r4
 8000740:	fbb1 f0f7 	udiv	r0, r1, r7
 8000744:	fb07 1110 	mls	r1, r7, r0, r1
 8000748:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800074c:	fb0e fe00 	mul.w	lr, lr, r0
 8000750:	45a6      	cmp	lr, r4
 8000752:	d908      	bls.n	8000766 <__udivmoddi4+0x156>
 8000754:	eb1c 0404 	adds.w	r4, ip, r4
 8000758:	f100 31ff 	add.w	r1, r0, #4294967295
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x154>
 800075e:	45a6      	cmp	lr, r4
 8000760:	f200 80bb 	bhi.w	80008da <__udivmoddi4+0x2ca>
 8000764:	4608      	mov	r0, r1
 8000766:	eba4 040e 	sub.w	r4, r4, lr
 800076a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800076e:	e79c      	b.n	80006aa <__udivmoddi4+0x9a>
 8000770:	f1c6 0720 	rsb	r7, r6, #32
 8000774:	40b3      	lsls	r3, r6
 8000776:	fa22 fc07 	lsr.w	ip, r2, r7
 800077a:	ea4c 0c03 	orr.w	ip, ip, r3
 800077e:	fa20 f407 	lsr.w	r4, r0, r7
 8000782:	fa01 f306 	lsl.w	r3, r1, r6
 8000786:	431c      	orrs	r4, r3
 8000788:	40f9      	lsrs	r1, r7
 800078a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800078e:	fa00 f306 	lsl.w	r3, r0, r6
 8000792:	fbb1 f8f9 	udiv	r8, r1, r9
 8000796:	0c20      	lsrs	r0, r4, #16
 8000798:	fa1f fe8c 	uxth.w	lr, ip
 800079c:	fb09 1118 	mls	r1, r9, r8, r1
 80007a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a4:	fb08 f00e 	mul.w	r0, r8, lr
 80007a8:	4288      	cmp	r0, r1
 80007aa:	fa02 f206 	lsl.w	r2, r2, r6
 80007ae:	d90b      	bls.n	80007c8 <__udivmoddi4+0x1b8>
 80007b0:	eb1c 0101 	adds.w	r1, ip, r1
 80007b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007b8:	f080 8088 	bcs.w	80008cc <__udivmoddi4+0x2bc>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f240 8085 	bls.w	80008cc <__udivmoddi4+0x2bc>
 80007c2:	f1a8 0802 	sub.w	r8, r8, #2
 80007c6:	4461      	add	r1, ip
 80007c8:	1a09      	subs	r1, r1, r0
 80007ca:	b2a4      	uxth	r4, r4
 80007cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d0:	fb09 1110 	mls	r1, r9, r0, r1
 80007d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007dc:	458e      	cmp	lr, r1
 80007de:	d908      	bls.n	80007f2 <__udivmoddi4+0x1e2>
 80007e0:	eb1c 0101 	adds.w	r1, ip, r1
 80007e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007e8:	d26c      	bcs.n	80008c4 <__udivmoddi4+0x2b4>
 80007ea:	458e      	cmp	lr, r1
 80007ec:	d96a      	bls.n	80008c4 <__udivmoddi4+0x2b4>
 80007ee:	3802      	subs	r0, #2
 80007f0:	4461      	add	r1, ip
 80007f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007f6:	fba0 9402 	umull	r9, r4, r0, r2
 80007fa:	eba1 010e 	sub.w	r1, r1, lr
 80007fe:	42a1      	cmp	r1, r4
 8000800:	46c8      	mov	r8, r9
 8000802:	46a6      	mov	lr, r4
 8000804:	d356      	bcc.n	80008b4 <__udivmoddi4+0x2a4>
 8000806:	d053      	beq.n	80008b0 <__udivmoddi4+0x2a0>
 8000808:	b15d      	cbz	r5, 8000822 <__udivmoddi4+0x212>
 800080a:	ebb3 0208 	subs.w	r2, r3, r8
 800080e:	eb61 010e 	sbc.w	r1, r1, lr
 8000812:	fa01 f707 	lsl.w	r7, r1, r7
 8000816:	fa22 f306 	lsr.w	r3, r2, r6
 800081a:	40f1      	lsrs	r1, r6
 800081c:	431f      	orrs	r7, r3
 800081e:	e9c5 7100 	strd	r7, r1, [r5]
 8000822:	2600      	movs	r6, #0
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	f1c2 0320 	rsb	r3, r2, #32
 800082e:	40d8      	lsrs	r0, r3
 8000830:	fa0c fc02 	lsl.w	ip, ip, r2
 8000834:	fa21 f303 	lsr.w	r3, r1, r3
 8000838:	4091      	lsls	r1, r2
 800083a:	4301      	orrs	r1, r0
 800083c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000840:	fa1f fe8c 	uxth.w	lr, ip
 8000844:	fbb3 f0f7 	udiv	r0, r3, r7
 8000848:	fb07 3610 	mls	r6, r7, r0, r3
 800084c:	0c0b      	lsrs	r3, r1, #16
 800084e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000852:	fb00 f60e 	mul.w	r6, r0, lr
 8000856:	429e      	cmp	r6, r3
 8000858:	fa04 f402 	lsl.w	r4, r4, r2
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x260>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 38ff 	add.w	r8, r0, #4294967295
 8000866:	d22f      	bcs.n	80008c8 <__udivmoddi4+0x2b8>
 8000868:	429e      	cmp	r6, r3
 800086a:	d92d      	bls.n	80008c8 <__udivmoddi4+0x2b8>
 800086c:	3802      	subs	r0, #2
 800086e:	4463      	add	r3, ip
 8000870:	1b9b      	subs	r3, r3, r6
 8000872:	b289      	uxth	r1, r1
 8000874:	fbb3 f6f7 	udiv	r6, r3, r7
 8000878:	fb07 3316 	mls	r3, r7, r6, r3
 800087c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000880:	fb06 f30e 	mul.w	r3, r6, lr
 8000884:	428b      	cmp	r3, r1
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x28a>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000890:	d216      	bcs.n	80008c0 <__udivmoddi4+0x2b0>
 8000892:	428b      	cmp	r3, r1
 8000894:	d914      	bls.n	80008c0 <__udivmoddi4+0x2b0>
 8000896:	3e02      	subs	r6, #2
 8000898:	4461      	add	r1, ip
 800089a:	1ac9      	subs	r1, r1, r3
 800089c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a0:	e738      	b.n	8000714 <__udivmoddi4+0x104>
 80008a2:	462e      	mov	r6, r5
 80008a4:	4628      	mov	r0, r5
 80008a6:	e705      	b.n	80006b4 <__udivmoddi4+0xa4>
 80008a8:	4606      	mov	r6, r0
 80008aa:	e6e3      	b.n	8000674 <__udivmoddi4+0x64>
 80008ac:	4618      	mov	r0, r3
 80008ae:	e6f8      	b.n	80006a2 <__udivmoddi4+0x92>
 80008b0:	454b      	cmp	r3, r9
 80008b2:	d2a9      	bcs.n	8000808 <__udivmoddi4+0x1f8>
 80008b4:	ebb9 0802 	subs.w	r8, r9, r2
 80008b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008bc:	3801      	subs	r0, #1
 80008be:	e7a3      	b.n	8000808 <__udivmoddi4+0x1f8>
 80008c0:	4646      	mov	r6, r8
 80008c2:	e7ea      	b.n	800089a <__udivmoddi4+0x28a>
 80008c4:	4620      	mov	r0, r4
 80008c6:	e794      	b.n	80007f2 <__udivmoddi4+0x1e2>
 80008c8:	4640      	mov	r0, r8
 80008ca:	e7d1      	b.n	8000870 <__udivmoddi4+0x260>
 80008cc:	46d0      	mov	r8, sl
 80008ce:	e77b      	b.n	80007c8 <__udivmoddi4+0x1b8>
 80008d0:	3b02      	subs	r3, #2
 80008d2:	4461      	add	r1, ip
 80008d4:	e732      	b.n	800073c <__udivmoddi4+0x12c>
 80008d6:	4630      	mov	r0, r6
 80008d8:	e709      	b.n	80006ee <__udivmoddi4+0xde>
 80008da:	4464      	add	r4, ip
 80008dc:	3802      	subs	r0, #2
 80008de:	e742      	b.n	8000766 <__udivmoddi4+0x156>

080008e0 <__aeabi_idiv0>:
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 fe6a 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f812 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 f8a8 	bl	8000a44 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008f4:	f000 f878 	bl	80009e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&MPU6050, FS_500, AFS_4G);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <main+0x28>)
 80008fe:	f000 f9e7 	bl	8000cd0 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 MPU6050_Start(&MPU6050, &temp);
 8000902:	4903      	ldr	r1, [pc, #12]	; (8000910 <main+0x2c>)
 8000904:	4801      	ldr	r0, [pc, #4]	; (800090c <main+0x28>)
 8000906:	f000 faf7 	bl	8000ef8 <MPU6050_Start>
 800090a:	e7fa      	b.n	8000902 <main+0x1e>
 800090c:	20000090 	.word	0x20000090
 8000910:	200000d0 	.word	0x200000d0

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f866 	bl	80039f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <SystemClock_Config+0xcc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <SystemClock_Config+0xcc>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <SystemClock_Config+0xcc>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <SystemClock_Config+0xd0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <SystemClock_Config+0xd0>)
 800095e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <SystemClock_Config+0xd0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000988:	23a8      	movs	r3, #168	; 0xa8
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000990:	2304      	movs	r3, #4
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fb7d 	bl	8003098 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a4:	f000 f876 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2105      	movs	r1, #5
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fdde 	bl	8003588 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009d2:	f000 f85f 	bl	8000a94 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3750      	adds	r7, #80	; 0x50
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f001 f8e3 	bl	8001bf0 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f830 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000d8 	.word	0x200000d8
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_GPIO_Init+0x4c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_I2C_MspInit+0x84>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12b      	bne.n	8000b6a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_I2C_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_I2C_MspInit+0x88>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_I2C_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b2e:	23c0      	movs	r3, #192	; 0xc0
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b32:	2312      	movs	r3, #18
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <HAL_I2C_MspInit+0x8c>)
 8000b4a:	f000 feb5 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_I2C_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_I2C_MspInit+0x88>)
 8000b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_I2C_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40005400 	.word	0x40005400
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020400 	.word	0x40020400

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 fd4a 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ffd7 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f002 fec1 	bl	80039ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fe5b 	bl	80008e4 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c3c:	08005204 	.word	0x08005204
  ldr r2, =_sbss
 8000c40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c44:	200001e0 	.word	0x200001e0

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>

08000c4a <IIRFirstOrder_Init>:

#include "IIR_filter.h"
#include "MPU_V2.1.h"


void IIRFirstOrder_Init(IIRFirstOrder *filter, float alpha) {
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	ed87 0a00 	vstr	s0, [r7]
	/*IIR filter Alpha is 0-1 it depends your Sampling time */
	filter->alpha = alpha;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	601a      	str	r2, [r3, #0]
	filter->beta= (1-filter->alpha);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	edc3 7a01 	vstr	s15, [r3, #4]
	filter->out   = 0.0f;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <IIRFirstOrder_Filter>:

float IIRFirstOrder_Filter(IIRFirstOrder *filter, float input) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	ed87 0a00 	vstr	s0, [r7]
	filter->out = filter->alpha * filter->out + filter->beta * input;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	ed93 7a00 	vldr	s14, [r3]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ca6:	edd7 7a00 	vldr	s15, [r7]
 8000caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	edc3 7a02 	vstr	s15, [r3, #8]
	return filter->out;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	ee07 3a90 	vmov	s15, r3
}
 8000cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <MPU6050_Init>:





void MPU6050_Init(Accel_Gyro *MPU6050 , Fs_sel_e Gyro_range, Afs_sel_e Acc_range){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	70bb      	strb	r3, [r7, #2]


     /* Gyroscope , Accelerometer Range and Division coefficient choice */
	switch (Gyro_range){
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d826      	bhi.n	8000d34 <MPU6050_Init+0x64>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <MPU6050_Init+0x1c>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000cfd 	.word	0x08000cfd
 8000cf0:	08000d0b 	.word	0x08000d0b
 8000cf4:	08000d19 	.word	0x08000d19
 8000cf8:	08000d27 	.word	0x08000d27
	case FS_250 : DATA_GYRO_CONFIG = 0x00 ; MPU6050->Div_coef_gyr  = 131.0f  ; break ;
 8000cfc:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <MPU6050_Init+0x1e8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a6d      	ldr	r2, [pc, #436]	; (8000ebc <MPU6050_Init+0x1ec>)
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
 8000d08:	e01b      	b.n	8000d42 <MPU6050_Init+0x72>
	case FS_500 : DATA_GYRO_CONFIG = 0x08 ; MPU6050->Div_coef_gyr  = 65.50f   ; break ;
 8000d0a:	4b6b      	ldr	r3, [pc, #428]	; (8000eb8 <MPU6050_Init+0x1e8>)
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a6b      	ldr	r2, [pc, #428]	; (8000ec0 <MPU6050_Init+0x1f0>)
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
 8000d16:	e014      	b.n	8000d42 <MPU6050_Init+0x72>
	case FS_1000: DATA_GYRO_CONFIG = 0x10 ; MPU6050->Div_coef_gyr  = 32.80f   ; break ;
 8000d18:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <MPU6050_Init+0x1e8>)
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a68      	ldr	r2, [pc, #416]	; (8000ec4 <MPU6050_Init+0x1f4>)
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
 8000d24:	e00d      	b.n	8000d42 <MPU6050_Init+0x72>
	case FS_2000: DATA_GYRO_CONFIG = 0x18 ; MPU6050->Div_coef_gyr  = 16.40f   ; break ;
 8000d26:	4b64      	ldr	r3, [pc, #400]	; (8000eb8 <MPU6050_Init+0x1e8>)
 8000d28:	2218      	movs	r2, #24
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a66      	ldr	r2, [pc, #408]	; (8000ec8 <MPU6050_Init+0x1f8>)
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
 8000d32:	e006      	b.n	8000d42 <MPU6050_Init+0x72>

	default:   DATA_GYRO_CONFIG = 0x00 ; MPU6050->Div_coef_gyr  = 131.0f  ; break ;
 8000d34:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <MPU6050_Init+0x1e8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a5f      	ldr	r2, [pc, #380]	; (8000ebc <MPU6050_Init+0x1ec>)
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000d40:	bf00      	nop

	}


	switch (Acc_range){
 8000d42:	78bb      	ldrb	r3, [r7, #2]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d82b      	bhi.n	8000da0 <MPU6050_Init+0xd0>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <MPU6050_Init+0x80>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000d61 	.word	0x08000d61
 8000d54:	08000d71 	.word	0x08000d71
 8000d58:	08000d81 	.word	0x08000d81
 8000d5c:	08000d91 	.word	0x08000d91

	case AFS_2G: DATA_ACCEL_CONFIG = 0x00 ; MPU6050->Div_coef_acc = 16384.0f ; break ;
 8000d60:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <MPU6050_Init+0x1fc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d6e:	e01e      	b.n	8000dae <MPU6050_Init+0xde>
	case AFS_4G: DATA_ACCEL_CONFIG = 0x08 ; MPU6050->Div_coef_acc = 8192.0f  ; break ;
 8000d70:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <MPU6050_Init+0x1fc>)
 8000d72:	2208      	movs	r2, #8
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d7e:	e016      	b.n	8000dae <MPU6050_Init+0xde>
	case AFS_8G: DATA_ACCEL_CONFIG = 0x10 ; MPU6050->Div_coef_acc = 4096.0f  ; break ;
 8000d80:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <MPU6050_Init+0x1fc>)
 8000d82:	2210      	movs	r2, #16
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8e:	e00e      	b.n	8000dae <MPU6050_Init+0xde>
	case AFS_16G:DATA_ACCEL_CONFIG=  0x18 ; MPU6050->Div_coef_acc = 2048.0f  ; break ;
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <MPU6050_Init+0x1fc>)
 8000d92:	2218      	movs	r2, #24
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d9e:	e006      	b.n	8000dae <MPU6050_Init+0xde>

	default:   DATA_ACCEL_CONFIG = 0x00 ; MPU6050->Div_coef_acc  = 16384.0f;
 8000da0:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <MPU6050_Init+0x1fc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/*Device Configuration  */


  while(!(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_I2C_ADRESS_AD0, TRIALS, TIMEOUT)==HAL_OK));
 8000dae:	bf00      	nop
 8000db0:	2364      	movs	r3, #100	; 0x64
 8000db2:	2202      	movs	r2, #2
 8000db4:	21d0      	movs	r1, #208	; 0xd0
 8000db6:	4846      	ldr	r0, [pc, #280]	; (8000ed0 <MPU6050_Init+0x200>)
 8000db8:	f001 fc7c 	bl	80026b4 <HAL_I2C_IsDeviceReady>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f6      	bne.n	8000db0 <MPU6050_Init+0xe0>

  /* Power manangment All bits are zero -> 0x00 */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, PWR_MGMT_1 ,SIZE_OF_ADDRES,&DATA_PWR_MGTM1,  SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8000dc2:	bf00      	nop
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <MPU6050_Init+0x204>)
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	226b      	movs	r2, #107	; 0x6b
 8000dd4:	21d0      	movs	r1, #208	; 0xd0
 8000dd6:	483e      	ldr	r0, [pc, #248]	; (8000ed0 <MPU6050_Init+0x200>)
 8000dd8:	f001 fb72 	bl	80024c0 <HAL_I2C_Mem_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f0      	bne.n	8000dc4 <MPU6050_Init+0xf4>
  /* Sample Rate Configuration (1kHz) -> 0x07 */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, SMPLRT_DIV ,SIZE_OF_ADDRES,&DATA_SMPRT_DIV , SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8000de2:	bf00      	nop
 8000de4:	2364      	movs	r3, #100	; 0x64
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <MPU6050_Init+0x208>)
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	2219      	movs	r2, #25
 8000df4:	21d0      	movs	r1, #208	; 0xd0
 8000df6:	4836      	ldr	r0, [pc, #216]	; (8000ed0 <MPU6050_Init+0x200>)
 8000df8:	f001 fb62 	bl	80024c0 <HAL_I2C_Mem_Write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <MPU6050_Init+0x114>
  /* Inertial Low pass Configuration ,this bits gives  actual bandwidth to us (Accelerometer 184 Hz - Gyroscope 188Hz ~= 200Hz  T=0.005) -> 0x01 */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, CONFIG ,SIZE_OF_ADDRES,&DATA_DLPF_CFG , SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8000e02:	bf00      	nop
 8000e04:	2364      	movs	r3, #100	; 0x64
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <MPU6050_Init+0x20c>)
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	221a      	movs	r2, #26
 8000e14:	21d0      	movs	r1, #208	; 0xd0
 8000e16:	482e      	ldr	r0, [pc, #184]	; (8000ed0 <MPU6050_Init+0x200>)
 8000e18:	f001 fb52 	bl	80024c0 <HAL_I2C_Mem_Write>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f0      	bne.n	8000e04 <MPU6050_Init+0x134>
  /* Accelerometer Configuration that you desire in Init function -> XXXX */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, ACCEL_CONFIG ,SIZE_OF_ADDRES, &DATA_ACCEL_CONFIG, SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8000e22:	bf00      	nop
 8000e24:	2364      	movs	r3, #100	; 0x64
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MPU6050_Init+0x1fc>)
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	221c      	movs	r2, #28
 8000e34:	21d0      	movs	r1, #208	; 0xd0
 8000e36:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <MPU6050_Init+0x200>)
 8000e38:	f001 fb42 	bl	80024c0 <HAL_I2C_Mem_Write>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <MPU6050_Init+0x154>
  /* Gyroscope Configuration that you desire in Init function-> XXXX */
  while(!(HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADRESS_AD0, GYRO_CONFIG ,SIZE_OF_ADDRES, &DATA_GYRO_CONFIG, SIZE_OF_DATA ,TIMEOUT)==HAL_OK));
 8000e42:	bf00      	nop
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MPU6050_Init+0x1e8>)
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	221b      	movs	r2, #27
 8000e54:	21d0      	movs	r1, #208	; 0xd0
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <MPU6050_Init+0x200>)
 8000e58:	f001 fb32 	bl	80024c0 <HAL_I2C_Mem_Write>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <MPU6050_Init+0x174>

  /*First Order IIR filter Initializing*/
  for(int n=0 ;n<3;n++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e01a      	b.n	8000e9e <MPU6050_Init+0x1ce>
  {

	  IIRFirstOrder_Init(&LpfAccel[n], LpfAccel_ALPHA);
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MPU6050_Init+0x210>)
 8000e74:	4413      	add	r3, r2
 8000e76:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8000ee4 <MPU6050_Init+0x214>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fee5 	bl	8000c4a <IIRFirstOrder_Init>

      IIRFirstOrder_Init(&LpfGyro [n], LpfGyro_ALPHA );
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <MPU6050_Init+0x218>)
 8000e8c:	4413      	add	r3, r2
 8000e8e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000eec <MPU6050_Init+0x21c>
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fed9 	bl	8000c4a <IIRFirstOrder_Init>
  for(int n=0 ;n<3;n++)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	dde1      	ble.n	8000e68 <MPU6050_Init+0x198>


   }
  /*Counter start for Sampling Period*/
  get_last_time1 = HAL_GetTick();
 8000ea4:	f000 fbf2 	bl	800168c <HAL_GetTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <MPU6050_Init+0x220>)
 8000eac:	6013      	str	r3, [r2, #0]


}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000178 	.word	0x20000178
 8000ebc:	43030000 	.word	0x43030000
 8000ec0:	42830000 	.word	0x42830000
 8000ec4:	42033333 	.word	0x42033333
 8000ec8:	41833333 	.word	0x41833333
 8000ecc:	20000179 	.word	0x20000179
 8000ed0:	200000d8 	.word	0x200000d8
 8000ed4:	2000017a 	.word	0x2000017a
 8000ed8:	20000005 	.word	0x20000005
 8000edc:	20000006 	.word	0x20000006
 8000ee0:	20000130 	.word	0x20000130
 8000ee4:	3f3afba0 	.word	0x3f3afba0
 8000ee8:	20000154 	.word	0x20000154
 8000eec:	3f54052f 	.word	0x3f54052f
 8000ef0:	2000012c 	.word	0x2000012c
 8000ef4:	00000000 	.word	0x00000000

08000ef8 <MPU6050_Start>:
void MPU6050_Start(Accel_Gyro*MPU6050 , Temperature *temp){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	ed2d 8b02 	vpush	{d8}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]



	           MPU6050_READ(GYRO_XOUT_H, rxbuff, 6);
 8000f06:	2206      	movs	r2, #6
 8000f08:	498a      	ldr	r1, [pc, #552]	; (8001134 <MPU6050_Start+0x23c>)
 8000f0a:	2043      	movs	r0, #67	; 0x43
 8000f0c:	f000 fa1e 	bl	800134c <MPU6050_READ>


	           MPU6050->GYRO_OUT_RAW[0] = (int16_t) ( (rxbuff[0] << 8) | rxbuff[1]);
 8000f10:	4b88      	ldr	r3, [pc, #544]	; (8001134 <MPU6050_Start+0x23c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	4b86      	ldr	r3, [pc, #536]	; (8001134 <MPU6050_Start+0x23c>)
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	80da      	strh	r2, [r3, #6]
	           MPU6050->GYRO_OUT_RAW[1] = (int16_t) ( (rxbuff[2] << 8) | rxbuff[3]);
 8000f26:	4b83      	ldr	r3, [pc, #524]	; (8001134 <MPU6050_Start+0x23c>)
 8000f28:	789b      	ldrb	r3, [r3, #2]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	4b81      	ldr	r3, [pc, #516]	; (8001134 <MPU6050_Start+0x23c>)
 8000f30:	78db      	ldrb	r3, [r3, #3]
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	811a      	strh	r2, [r3, #8]
	           MPU6050->GYRO_OUT_RAW[2] = (int16_t) ( (rxbuff[4] << 8) | rxbuff[5]);
 8000f3c:	4b7d      	ldr	r3, [pc, #500]	; (8001134 <MPU6050_Start+0x23c>)
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <MPU6050_Start+0x23c>)
 8000f46:	795b      	ldrb	r3, [r3, #5]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	815a      	strh	r2, [r3, #10]


	           gyro_dps[0] =  (float)((MPU6050->GYRO_OUT_RAW [0] / MPU6050->Div_coef_gyr ));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6a:	4b73      	ldr	r3, [pc, #460]	; (8001138 <MPU6050_Start+0x240>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
	           gyro_dps[1] =  (float)((MPU6050->GYRO_OUT_RAW [1] / MPU6050->Div_coef_gyr ));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <MPU6050_Start+0x240>)
 8000f8a:	edc3 7a01 	vstr	s15, [r3, #4]
	           gyro_dps[2] =  (float)((MPU6050->GYRO_OUT_RAW [2] / MPU6050->Div_coef_gyr ));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	4b64      	ldr	r3, [pc, #400]	; (8001138 <MPU6050_Start+0x240>)
 8000fa8:	edc3 7a02 	vstr	s15, [r3, #8]


	           /*First Order IIR filter Update for Gyroscope*/
	           for(int i =0 ; i<3;i++){
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e022      	b.n	8000ff8 <MPU6050_Start+0x100>
	        	   IIRFirstOrder_Filter(&LpfGyro[i], gyro_dps[i]);
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4a5f      	ldr	r2, [pc, #380]	; (800113c <MPU6050_Start+0x244>)
 8000fbe:	441a      	add	r2, r3
 8000fc0:	495d      	ldr	r1, [pc, #372]	; (8001138 <MPU6050_Start+0x240>)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	f7ff fe57 	bl	8000c84 <IIRFirstOrder_Filter>
	        	   filtered_gyro_dps[i]= LpfGyro[i].out;
 8000fd6:	4959      	ldr	r1, [pc, #356]	; (800113c <MPU6050_Start+0x244>)
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4955      	ldr	r1, [pc, #340]	; (8001140 <MPU6050_Start+0x248>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	601a      	str	r2, [r3, #0]
	           for(int i =0 ; i<3;i++){
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	ddd9      	ble.n	8000fb2 <MPU6050_Start+0xba>
	           }




	           MPU6050->Xgy +=  (filtered_gyro_dps[0] -  GYRO_BIAS_X) * DPS_2_RPS * Sampling_Per  ;     //GyroX *dt
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	ed93 7a06 	vldr	s14, [r3, #24]
 8001004:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <MPU6050_Start+0x248>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001144 <MPU6050_Start+0x24c>
 800100e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001012:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001148 <MPU6050_Start+0x250>
 8001016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800101a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800114c <MPU6050_Start+0x254>
 800101e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	edc3 7a06 	vstr	s15, [r3, #24]
	           MPU6050->Ygy +=  (filtered_gyro_dps[1] -  GYRO_BIAS_Y) * DPS_2_RPS * Sampling_Per  ;     //GyroY *dt
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <MPU6050_Start+0x248>)
 8001034:	edd3 7a01 	vldr	s15, [r3, #4]
 8001038:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001150 <MPU6050_Start+0x258>
 800103c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001040:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001148 <MPU6050_Start+0x250>
 8001044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001048:	eddf 6a40 	vldr	s13, [pc, #256]	; 800114c <MPU6050_Start+0x254>
 800104c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edc3 7a07 	vstr	s15, [r3, #28]
	           MPU6050->Zgy +=  (filtered_gyro_dps[2] -  GYRO_BIAS_Z) * DPS_2_RPS * Sampling_Per  ;     //GyroZ *dt
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001060:	4b37      	ldr	r3, [pc, #220]	; (8001140 <MPU6050_Start+0x248>)
 8001062:	edd3 7a02 	vldr	s15, [r3, #8]
 8001066:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001154 <MPU6050_Start+0x25c>
 800106a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800106e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001148 <MPU6050_Start+0x250>
 8001072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001076:	eddf 6a35 	vldr	s13, [pc, #212]	; 800114c <MPU6050_Start+0x254>
 800107a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edc3 7a08 	vstr	s15, [r3, #32]


	           MPU6050_READ(ACCEL_XOUT_H, rxbuff2, 6);
 8001088:	2206      	movs	r2, #6
 800108a:	4933      	ldr	r1, [pc, #204]	; (8001158 <MPU6050_Start+0x260>)
 800108c:	203b      	movs	r0, #59	; 0x3b
 800108e:	f000 f95d 	bl	800134c <MPU6050_READ>


	           MPU6050->ACCEL_OUT_RAW[0] = ((int16_t)(rxbuff2[0] << 8 | rxbuff2[1]));
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <MPU6050_Start+0x260>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <MPU6050_Start+0x260>)
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	801a      	strh	r2, [r3, #0]
	           MPU6050->ACCEL_OUT_RAW[1] = ((int16_t)(rxbuff2[2] << 8 | rxbuff2[3]));
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <MPU6050_Start+0x260>)
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MPU6050_Start+0x260>)
 80010b2:	78db      	ldrb	r3, [r3, #3]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	805a      	strh	r2, [r3, #2]
	           MPU6050->ACCEL_OUT_RAW[2] = ((int16_t)(rxbuff2[4] << 8 | rxbuff2[5]));
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MPU6050_Start+0x260>)
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MPU6050_Start+0x260>)
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	809a      	strh	r2, [r3, #4]

	           accel_g[0] = (float)((MPU6050->ACCEL_OUT_RAW[0]/MPU6050->Div_coef_acc));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MPU6050_Start+0x264>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]
	           accel_g[1] = (float)((MPU6050->ACCEL_OUT_RAW[1]/MPU6050->Div_coef_acc));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MPU6050_Start+0x264>)
 800110c:	edc3 7a01 	vstr	s15, [r3, #4]
	           accel_g[2] = (float)((MPU6050->ACCEL_OUT_RAW[2]/MPU6050->Div_coef_acc));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MPU6050_Start+0x264>)
 800112a:	edc3 7a02 	vstr	s15, [r3, #8]

	           /*First Order IIR filter Update for Accelerometer*/

	           for (int j=0; j<3  ; j++){
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	e038      	b.n	80011a6 <MPU6050_Start+0x2ae>
 8001134:	2000017c 	.word	0x2000017c
 8001138:	200001ac 	.word	0x200001ac
 800113c:	20000154 	.word	0x20000154
 8001140:	20000194 	.word	0x20000194
 8001144:	3efced3f 	.word	0x3efced3f
 8001148:	3c8efa35 	.word	0x3c8efa35
 800114c:	3ba3d70a 	.word	0x3ba3d70a
 8001150:	3fb3799b 	.word	0x3fb3799b
 8001154:	3d867582 	.word	0x3d867582
 8001158:	20000184 	.word	0x20000184
 800115c:	200001b8 	.word	0x200001b8
	        	   IIRFirstOrder_Filter(&LpfAccel[j], accel_g[j]);
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4a69      	ldr	r2, [pc, #420]	; (8001310 <MPU6050_Start+0x418>)
 800116c:	441a      	add	r2, r3
 800116e:	4969      	ldr	r1, [pc, #420]	; (8001314 <MPU6050_Start+0x41c>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	4610      	mov	r0, r2
 8001180:	f7ff fd80 	bl	8000c84 <IIRFirstOrder_Filter>

	        	    filtered_accel_g[j] =LpfAccel[j].out;
 8001184:	4962      	ldr	r1, [pc, #392]	; (8001310 <MPU6050_Start+0x418>)
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	3308      	adds	r3, #8
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4960      	ldr	r1, [pc, #384]	; (8001318 <MPU6050_Start+0x420>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	601a      	str	r2, [r3, #0]
	           for (int j=0; j<3  ; j++){
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	ddd9      	ble.n	8001160 <MPU6050_Start+0x268>

	           }
	           /*Scale and Bias factors implementation*/

	           MPU6050->Xacc =    ACCEL_SCALE_X * filtered_accel_g[0] + ACCEL_BIAS_X;  //Scale and Bias factors depends your sensor ,I will explain next posts in linedln
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <MPU6050_Start+0x420>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800131c <MPU6050_Start+0x424>
 80011b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ba:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001320 <MPU6050_Start+0x428>
 80011be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edc3 7a03 	vstr	s15, [r3, #12]
	           MPU6050->Yacc =    ACCEL_SCALE_Y * filtered_accel_g[1] + ACCEL_BIAS_Y;  //Scale and Bias factors depends your sensor ,I will explain next posts in linedln
 80011c8:	4b53      	ldr	r3, [pc, #332]	; (8001318 <MPU6050_Start+0x420>)
 80011ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ce:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001324 <MPU6050_Start+0x42c>
 80011d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001328 <MPU6050_Start+0x430>
 80011da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edc3 7a04 	vstr	s15, [r3, #16]
	           MPU6050->Zacc =    ACCEL_SCALE_Z * filtered_accel_g[2] + ACCEL_BIAS_Z;  //Scale and Bias factors depends your sensor ,I will explain next posts in linedln
 80011e4:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <MPU6050_Start+0x420>)
 80011e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ea:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800132c <MPU6050_Start+0x434>
 80011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001330 <MPU6050_Start+0x438>
 80011f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	edc3 7a05 	vstr	s15, [r3, #20]

	           /*Temperature calculations*/
	           MPU6050_READ(TEMP_OUT_H , rxbuff3, 2);
 8001200:	2202      	movs	r2, #2
 8001202:	494c      	ldr	r1, [pc, #304]	; (8001334 <MPU6050_Start+0x43c>)
 8001204:	2041      	movs	r0, #65	; 0x41
 8001206:	f000 f8a1 	bl	800134c <MPU6050_READ>

	           temp->Temp_Raw = (int16_t)(rxbuff3[0] <<8 | rxbuff3[1]);
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <MPU6050_Start+0x43c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b48      	ldr	r3, [pc, #288]	; (8001334 <MPU6050_Start+0x43c>)
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21a      	sxth	r2, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	801a      	strh	r2, [r3, #0]
	           temp->Temperature =(float)((temp->Temp_Raw / 340) + 36.53);/*Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53*/
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001226:	4a44      	ldr	r2, [pc, #272]	; (8001338 <MPU6050_Start+0x440>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	11d2      	asrs	r2, r2, #7
 800122e:	17db      	asrs	r3, r3, #31
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	b21b      	sxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f919 	bl	800046c <__aeabi_i2d>
 800123a:	a333      	add	r3, pc, #204	; (adr r3, 8001308 <MPU6050_Start+0x410>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7fe ffc8 	bl	80001d4 <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff f978 	bl	8000540 <__aeabi_d2f>
 8001250:	4602      	mov	r2, r0
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	605a      	str	r2, [r3, #4]

	           /*Total 3D vector Magnitude for angles calculations*/

	           Magnitude =  sqrtf(powf(MPU6050->Xacc,2.0f) +  powf(MPU6050->Yacc,2.0f) + powf(MPU6050->Zacc , 2.0f));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	edd3 7a03 	vldr	s15, [r3, #12]
 800125c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	f002 fc40 	bl	8003ae8 <powf>
 8001268:	eeb0 8a40 	vmov.f32	s16, s0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001272:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	f002 fc35 	bl	8003ae8 <powf>
 800127e:	eef0 7a40 	vmov.f32	s15, s0
 8001282:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	edd3 7a05 	vldr	s15, [r3, #20]
 800128c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f002 fc28 	bl	8003ae8 <powf>
 8001298:	eef0 7a40 	vmov.f32	s15, s0
 800129c:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	f002 fc78 	bl	8003b98 <sqrtf>
 80012a8:	eef0 7a40 	vmov.f32	s15, s0
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <MPU6050_Start+0x444>)
 80012ae:	edc3 7a00 	vstr	s15, [r3]


	           Error_calc(MPU6050, Magnitude);
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MPU6050_Start+0x444>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f92f 	bl	8001520 <Error_calc>



	           Complementary_filter(MPU6050);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f864 	bl	8001390 <Complementary_filter>



	           /*Measuring  Sampling period for bandwidth -> T =0.005 , 200Hz*/

	           delta_t1 = (float)(HAL_GetTick() - get_last_time1) / 1000 ;
 80012c8:	f000 f9e0 	bl	800168c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MPU6050_Start+0x448>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012dc:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001344 <MPU6050_Start+0x44c>
 80012e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MPU6050_Start+0x450>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]
	           get_last_time1 = HAL_GetTick();
 80012ea:	f000 f9cf 	bl	800168c <HAL_GetTick>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <MPU6050_Start+0x448>)
 80012f2:	6013      	str	r3, [r2, #0]
	           HAL_Delay(2);
 80012f4:	2002      	movs	r0, #2
 80012f6:	f000 f9d5 	bl	80016a4 <HAL_Delay>


}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	ecbd 8b02 	vpop	{d8}
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	0a3d70a4 	.word	0x0a3d70a4
 800130c:	404243d7 	.word	0x404243d7
 8001310:	20000130 	.word	0x20000130
 8001314:	200001b8 	.word	0x200001b8
 8001318:	200001a0 	.word	0x200001a0
 800131c:	3f812400 	.word	0x3f812400
 8001320:	3d88cbf7 	.word	0x3d88cbf7
 8001324:	3f80ee96 	.word	0x3f80ee96
 8001328:	3bb92ae2 	.word	0x3bb92ae2
 800132c:	3f881906 	.word	0x3f881906
 8001330:	3e40a920 	.word	0x3e40a920
 8001334:	2000018c 	.word	0x2000018c
 8001338:	60606061 	.word	0x60606061
 800133c:	20000190 	.word	0x20000190
 8001340:	2000012c 	.word	0x2000012c
 8001344:	447a0000 	.word	0x447a0000
 8001348:	200001c4 	.word	0x200001c4

0800134c <MPU6050_READ>:




void MPU6050_READ(uint8_t RegAddress , uint8_t *Rxbuffer, uint8_t size){
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af02      	add	r7, sp, #8
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	4613      	mov	r3, r2
 800135a:	71bb      	strb	r3, [r7, #6]

	uint8_t Txbuffer[1];


	Txbuffer[0]=RegAddress;
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_I2C_ADRESS_AD0, Txbuffer, SIZE_OF_DATA, TIMEOUT);
 8001360:	f107 020c 	add.w	r2, r7, #12
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	21d0      	movs	r1, #208	; 0xd0
 800136c:	4807      	ldr	r0, [pc, #28]	; (800138c <MPU6050_READ+0x40>)
 800136e:	f000 fd83 	bl	8001e78 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MPU6050_I2C_ADRESS_AD0, Rxbuffer, size, TIMEOUT);
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	b29b      	uxth	r3, r3
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	9200      	str	r2, [sp, #0]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	21d0      	movs	r1, #208	; 0xd0
 800137e:	4803      	ldr	r0, [pc, #12]	; (800138c <MPU6050_READ+0x40>)
 8001380:	f000 fe78 	bl	8002074 <HAL_I2C_Master_Receive>

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000d8 	.word	0x200000d8

08001390 <Complementary_filter>:


void Complementary_filter(Accel_Gyro *MPU6050){
 8001390:	b580      	push	{r7, lr}
 8001392:	ed2d 8b02 	vpush	{d8}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]


    /* from 3D vector to angle using arcsin , if you choose correct vectors, you can use any method atan2f(arctan) or other terms*/
    roll_acc  = asinf(  MPU6050->Xacc / Magnitude);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	ed93 7a03 	vldr	s14, [r3, #12]
 80013a2:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <Complementary_filter+0x168>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ac:	eeb0 0a66 	vmov.f32	s0, s13
 80013b0:	f002 fb6e 	bl	8003a90 <asinf>
 80013b4:	eef0 7a40 	vmov.f32	s15, s0
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <Complementary_filter+0x16c>)
 80013ba:	edc3 7a00 	vstr	s15, [r3]
    pitch_acc = asinf( -MPU6050->Yacc / Magnitude);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80013c4:	eeb1 7a67 	vneg.f32	s14, s15
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <Complementary_filter+0x168>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013d2:	eeb0 0a66 	vmov.f32	s0, s13
 80013d6:	f002 fb5b 	bl	8003a90 <asinf>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <Complementary_filter+0x170>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]

    roll_gyro  = MPU6050->Xgy;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a46      	ldr	r2, [pc, #280]	; (8001504 <Complementary_filter+0x174>)
 80013ea:	6013      	str	r3, [r2, #0]
    pitch_gyro = MPU6050->Ygy;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a45      	ldr	r2, [pc, #276]	; (8001508 <Complementary_filter+0x178>)
 80013f2:	6013      	str	r3, [r2, #0]

    /*Axis shifting*/

    roll_gyro  -=  pitch_gyro * sinf(MPU6050->Zgy);
 80013f4:	4b43      	ldr	r3, [pc, #268]	; (8001504 <Complementary_filter+0x174>)
 80013f6:	ed93 8a00 	vldr	s16, [r3]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001400:	eeb0 0a67 	vmov.f32	s0, s15
 8001404:	f002 fafe 	bl	8003a04 <sinf>
 8001408:	eeb0 7a40 	vmov.f32	s14, s0
 800140c:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <Complementary_filter+0x178>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001416:	ee78 7a67 	vsub.f32	s15, s16, s15
 800141a:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <Complementary_filter+0x174>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
    pitch_gyro +=  roll_gyro  * sinf(MPU6050->Zgy);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edd3 7a08 	vldr	s15, [r3, #32]
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	f002 faeb 	bl	8003a04 <sinf>
 800142e:	eeb0 7a40 	vmov.f32	s14, s0
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <Complementary_filter+0x174>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <Complementary_filter+0x178>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <Complementary_filter+0x178>)
 8001448:	edc3 7a00 	vstr	s15, [r3]

    /*Initiliaze first values*/
    initial_check = (initial_check == not_initiliazed) ? inital_roll_pitch(): initiliazed ;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <Complementary_filter+0x17c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d104      	bne.n	800145e <Complementary_filter+0xce>
 8001454:	f000 f89c 	bl	8001590 <inital_roll_pitch>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	e000      	b.n	8001460 <Complementary_filter+0xd0>
 800145e:	2200      	movs	r2, #0
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <Complementary_filter+0x17c>)
 8001462:	701a      	strb	r2, [r3, #0]


    roll_gyro = ( (  (roll_gyro  )   * (1- ALPHA) ) + ALPHA  *  roll_acc ) * RAD_2_DEG;
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <Complementary_filter+0x174>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001510 <Complementary_filter+0x180>
 800146e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <Complementary_filter+0x16c>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001514 <Complementary_filter+0x184>
 800147c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001518 <Complementary_filter+0x188>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <Complementary_filter+0x174>)
 800148e:	edc3 7a00 	vstr	s15, [r3]
    pitch_gyro= ( (  (pitch_gyro )   * (1- ALPHA) ) + ALPHA  *  pitch_acc) * RAD_2_DEG;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <Complementary_filter+0x178>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001510 <Complementary_filter+0x180>
 800149c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <Complementary_filter+0x170>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001514 <Complementary_filter+0x184>
 80014aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001518 <Complementary_filter+0x188>
 80014b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <Complementary_filter+0x178>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]
    Yaw = (MPU6050->Zgy)*RAD_2_DEG;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80014c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001518 <Complementary_filter+0x188>
 80014ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <Complementary_filter+0x18c>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]



    MPU6050->Roll  = roll_gyro ;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <Complementary_filter+0x174>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    MPU6050->Pitch = pitch_gyro;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <Complementary_filter+0x178>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
    MPU6050->Yaw   =   Yaw     ; // We can  use sensor fusion algorithm with Magnetometer for reach more correct Yaw axis.
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <Complementary_filter+0x18c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34

}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	ecbd 8b02 	vpop	{d8}
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000190 	.word	0x20000190
 80014fc:	200001c8 	.word	0x200001c8
 8001500:	200001cc 	.word	0x200001cc
 8001504:	200001d0 	.word	0x200001d0
 8001508:	200001d4 	.word	0x200001d4
 800150c:	20000004 	.word	0x20000004
 8001510:	3a031400 	.word	0x3a031400
 8001514:	3f7fdf3b 	.word	0x3f7fdf3b
 8001518:	42652ee1 	.word	0x42652ee1
 800151c:	200001d8 	.word	0x200001d8

08001520 <Error_calc>:


void Error_calc(Accel_Gyro*MPU6050, float mag /*magnitude*/){
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	ed87 0a00 	vstr	s0, [r7]

	/*Absolute value */

	 (mag < 0 ? (mag *=-1) : (mag *=1));
 800152c:	edd7 7a00 	vldr	s15, [r7]
 8001530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d505      	bpl.n	8001546 <Error_calc+0x26>
 800153a:	edd7 7a00 	vldr	s15, [r7]
 800153e:	eef1 7a67 	vneg.f32	s15, s15
 8001542:	edc7 7a00 	vstr	s15, [r7]

	 MPU6050->Accel_Error_percent = (1-mag) * 100;
 8001546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800154a:	edd7 7a00 	vldr	s15, [r7]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800158c <Error_calc+0x6c>
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	 MPU6050->Gyro_Error_val  = (  MPU6050->Xgy +  MPU6050->Ygy +   MPU6050->Zgy );
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	ed93 7a06 	vldr	s14, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edd3 7a07 	vldr	s15, [r3, #28]
 800156c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a08 	vldr	s15, [r3, #32]
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	42c80000 	.word	0x42c80000

08001590 <inital_roll_pitch>:


Inital_check inital_roll_pitch(){
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

pitch_gyro = pitch_acc ;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <inital_roll_pitch+0x20>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <inital_roll_pitch+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
roll_gyro  = roll_acc ;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <inital_roll_pitch+0x28>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <inital_roll_pitch+0x2c>)
 80015a2:	6013      	str	r3, [r2, #0]

return  initiliazed ;}
 80015a4:	2300      	movs	r3, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	200001cc 	.word	0x200001cc
 80015b4:	200001d4 	.word	0x200001d4
 80015b8:	200001c8 	.word	0x200001c8
 80015bc:	200001d0 	.word	0x200001d0

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_Init+0x40>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_Init+0x40>)
 80015d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x40>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f931 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fa54 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f93b 	bl	800189e <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f911 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	2000000c 	.word	0x2000000c
 8001660:	20000008 	.word	0x20000008

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000000c 	.word	0x2000000c
 8001688:	200001dc 	.word	0x200001dc

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200001dc 	.word	0x200001dc

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff ffee 	bl	800168c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffde 	bl	800168c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000000c 	.word	0x2000000c

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f7ff ff8e 	bl	8001750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff47 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff5c 	bl	8001734 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff8e 	bl	80017a4 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5d 	bl	8001750 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffb0 	bl	800180c <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	e16b      	b.n	8001bac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 815a 	bne.w	8001ba6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d005      	beq.n	800190a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001906:	2b02      	cmp	r3, #2
 8001908:	d130      	bne.n	800196c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 0201 	and.w	r2, r3, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b03      	cmp	r3, #3
 8001976:	d017      	beq.n	80019a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d123      	bne.n	80019fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	69b9      	ldr	r1, [r7, #24]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80b4 	beq.w	8001ba6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b60      	ldr	r3, [pc, #384]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a5f      	ldr	r2, [pc, #380]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_GPIO_Init+0x30c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_GPIO_Init+0x310>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_GPIO_Init+0x314>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x226>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x318>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x222>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_GPIO_Init+0x31c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x21e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_GPIO_Init+0x320>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x21a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_GPIO_Init+0x324>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x216>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x328>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x212>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_GPIO_Init+0x32c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x20e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	; (8001be8 <HAL_GPIO_Init+0x330>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x20a>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00e      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x228>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x310>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a32      	ldr	r2, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_GPIO_Init+0x334>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f ae90 	bls.w	80018d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40021400 	.word	0x40021400
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40021c00 	.word	0x40021c00
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e12b      	b.n	8001e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe ff6a 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c54:	f001 fe90 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8001c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a81      	ldr	r2, [pc, #516]	; (8001e64 <HAL_I2C_Init+0x274>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d807      	bhi.n	8001c74 <HAL_I2C_Init+0x84>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a80      	ldr	r2, [pc, #512]	; (8001e68 <HAL_I2C_Init+0x278>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	bf94      	ite	ls
 8001c6c:	2301      	movls	r3, #1
 8001c6e:	2300      	movhi	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	e006      	b.n	8001c82 <HAL_I2C_Init+0x92>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a7d      	ldr	r2, [pc, #500]	; (8001e6c <HAL_I2C_Init+0x27c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0e7      	b.n	8001e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <HAL_I2C_Init+0x280>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9b      	lsrs	r3, r3, #18
 8001c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a6a      	ldr	r2, [pc, #424]	; (8001e64 <HAL_I2C_Init+0x274>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_I2C_Init+0xd4>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	e009      	b.n	8001cd8 <HAL_I2C_Init+0xe8>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	4a69      	ldr	r2, [pc, #420]	; (8001e74 <HAL_I2C_Init+0x284>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	495c      	ldr	r1, [pc, #368]	; (8001e64 <HAL_I2C_Init+0x274>)
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d819      	bhi.n	8001d2c <HAL_I2C_Init+0x13c>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e59      	subs	r1, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d06:	1c59      	adds	r1, r3, #1
 8001d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_I2C_Init+0x138>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e59      	subs	r1, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d26:	e051      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e04f      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d111      	bne.n	8001d58 <HAL_I2C_Init+0x168>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e58      	subs	r0, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e012      	b.n	8001d7e <HAL_I2C_Init+0x18e>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1e58      	subs	r0, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	0099      	lsls	r1, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x196>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e022      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10e      	bne.n	8001dac <HAL_I2C_Init+0x1bc>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1e58      	subs	r0, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	440b      	add	r3, r1
 8001d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001daa:	e00f      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	0099      	lsls	r1, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	6809      	ldr	r1, [r1, #0]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6911      	ldr	r1, [r2, #16]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	000186a0 	.word	0x000186a0
 8001e68:	001e847f 	.word	0x001e847f
 8001e6c:	003d08ff 	.word	0x003d08ff
 8001e70:	431bde83 	.word	0x431bde83
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	460b      	mov	r3, r1
 8001e86:	817b      	strh	r3, [r7, #10]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff fbfe 	bl	800168c <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	f040 80e0 	bne.w	8002060 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2319      	movs	r3, #25
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4970      	ldr	r1, [pc, #448]	; (800206c <HAL_I2C_Master_Transmit+0x1f4>)
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 ff16 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e0d3      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_I2C_Master_Transmit+0x50>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e0cc      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d007      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2221      	movs	r2, #33	; 0x21
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	893a      	ldrh	r2, [r7, #8]
 8001f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a50      	ldr	r2, [pc, #320]	; (8002070 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f30:	8979      	ldrh	r1, [r7, #10]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fcea 	bl	8002910 <I2C_MasterRequestWrite>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e08d      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f5c:	e066      	b.n	800202c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	6a39      	ldr	r1, [r7, #32]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 ff90 	bl	8002e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d107      	bne.n	8001f86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d11b      	bne.n	8002000 <HAL_I2C_Master_Transmit+0x188>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d017      	beq.n	8002000 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	6a39      	ldr	r1, [r7, #32]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 ff80 	bl	8002f0a <I2C_WaitOnBTFFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2b04      	cmp	r3, #4
 8002016:	d107      	bne.n	8002028 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002026:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e01a      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d194      	bne.n	8001f5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	00100002 	.word	0x00100002
 8002070:	ffff0000 	.word	0xffff0000

08002074 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	461a      	mov	r2, r3
 8002080:	460b      	mov	r3, r1
 8002082:	817b      	strh	r3, [r7, #10]
 8002084:	4613      	mov	r3, r2
 8002086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff fb00 	bl	800168c <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	f040 820b 	bne.w	80024b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	497c      	ldr	r1, [pc, #496]	; (8002298 <HAL_I2C_Master_Receive+0x224>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fe18 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
 80020b4:	e1fe      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2C_Master_Receive+0x50>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e1f7      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d007      	beq.n	80020ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2222      	movs	r2, #34	; 0x22
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2210      	movs	r2, #16
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	893a      	ldrh	r2, [r7, #8]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a5c      	ldr	r2, [pc, #368]	; (800229c <HAL_I2C_Master_Receive+0x228>)
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fc6e 	bl	8002a14 <I2C_MasterRequestRead>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1b8      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	d113      	bne.n	8002172 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e18c      	b.n	800248c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	2b01      	cmp	r3, #1
 8002178:	d11b      	bne.n	80021b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e16c      	b.n	800248c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d11b      	bne.n	80021f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	e14c      	b.n	800248c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002218:	e138      	b.n	800248c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	2b03      	cmp	r3, #3
 8002220:	f200 80f1 	bhi.w	8002406 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	2b01      	cmp	r3, #1
 800222a:	d123      	bne.n	8002274 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 feab 	bl	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e139      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002272:	e10b      	b.n	800248c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	2b02      	cmp	r3, #2
 800227a:	d14e      	bne.n	800231a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	2200      	movs	r2, #0
 8002284:	4906      	ldr	r1, [pc, #24]	; (80022a0 <HAL_I2C_Master_Receive+0x22c>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fd28 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e10e      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
 8002296:	bf00      	nop
 8002298:	00100002 	.word	0x00100002
 800229c:	ffff0000 	.word	0xffff0000
 80022a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002318:	e0b8      	b.n	800248c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	2200      	movs	r2, #0
 8002322:	4966      	ldr	r1, [pc, #408]	; (80024bc <HAL_I2C_Master_Receive+0x448>)
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fcd9 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0bf      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	2200      	movs	r2, #0
 800237e:	494f      	ldr	r1, [pc, #316]	; (80024bc <HAL_I2C_Master_Receive+0x448>)
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fcab 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e091      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002404:	e042      	b.n	800248c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fdbe 	bl	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e04c      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d118      	bne.n	800248c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f aec2 	bne.w	800221a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00010004 	.word	0x00010004

080024c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	817b      	strh	r3, [r7, #10]
 80024d2:	460b      	mov	r3, r1
 80024d4:	813b      	strh	r3, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024da:	f7ff f8d7 	bl	800168c <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	f040 80d9 	bne.w	80026a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2319      	movs	r3, #25
 80024f4:	2201      	movs	r2, #1
 80024f6:	496d      	ldr	r1, [pc, #436]	; (80026ac <HAL_I2C_Mem_Write+0x1ec>)
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fbef 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	e0cc      	b.n	80026a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_I2C_Mem_Write+0x56>
 8002512:	2302      	movs	r3, #2
 8002514:	e0c5      	b.n	80026a2 <HAL_I2C_Mem_Write+0x1e2>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d007      	beq.n	800253c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2221      	movs	r2, #33	; 0x21
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a4d      	ldr	r2, [pc, #308]	; (80026b0 <HAL_I2C_Mem_Write+0x1f0>)
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800257e:	88f8      	ldrh	r0, [r7, #6]
 8002580:	893a      	ldrh	r2, [r7, #8]
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	4603      	mov	r3, r0
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fb0e 	bl	8002bb0 <I2C_RequestMemoryWrite>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d052      	beq.n	8002640 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e081      	b.n	80026a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fc70 	bl	8002e88 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d107      	bne.n	80025c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06b      	b.n	80026a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <HAL_I2C_Mem_Write+0x180>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1aa      	bne.n	800259e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fc5c 	bl	8002f0a <I2C_WaitOnBTFFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	2b04      	cmp	r3, #4
 800265e:	d107      	bne.n	8002670 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e016      	b.n	80026a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	00100002 	.word	0x00100002
 80026b0:	ffff0000 	.word	0xffff0000

080026b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7fe ffe2 	bl	800168c <HAL_GetTick>
 80026c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 8111 	bne.w	80028fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	4988      	ldr	r1, [pc, #544]	; (8002908 <HAL_I2C_IsDeviceReady+0x254>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 faf8 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e104      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_IsDeviceReady+0x50>
 8002700:	2302      	movs	r3, #2
 8002702:	e0fd      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x24c>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d007      	beq.n	800272a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002738:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2224      	movs	r2, #36	; 0x24
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a70      	ldr	r2, [pc, #448]	; (800290c <HAL_I2C_IsDeviceReady+0x258>)
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800275c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fab6 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002784:	d103      	bne.n	800278e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0b6      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe ff73 	bl	800168c <HAL_GetTick>
 80027a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027d6:	e025      	b.n	8002824 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7fe ff58 	bl	800168c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <HAL_I2C_IsDeviceReady+0x13a>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	22a0      	movs	r2, #160	; 0xa0
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b02      	cmp	r3, #2
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2ba0      	cmp	r3, #160	; 0xa0
 800282e:	d005      	beq.n	800283c <HAL_I2C_IsDeviceReady+0x188>
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <HAL_I2C_IsDeviceReady+0x188>
 8002836:	7dbb      	ldrb	r3, [r7, #22]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0cd      	beq.n	80027d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d129      	bne.n	80028a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002860:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2319      	movs	r3, #25
 800287e:	2201      	movs	r2, #1
 8002880:	4921      	ldr	r1, [pc, #132]	; (8002908 <HAL_I2C_IsDeviceReady+0x254>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa2a 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e036      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e02c      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2319      	movs	r3, #25
 80028c6:	2201      	movs	r2, #1
 80028c8:	490f      	ldr	r1, [pc, #60]	; (8002908 <HAL_I2C_IsDeviceReady+0x254>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fa06 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e012      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	3301      	adds	r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	f4ff af32 	bcc.w	800274e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00100002 	.word	0x00100002
 800290c:	ffff0000 	.word	0xffff0000

08002910 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	460b      	mov	r3, r1
 800291e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d006      	beq.n	800293a <I2C_MasterRequestWrite+0x2a>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d003      	beq.n	800293a <I2C_MasterRequestWrite+0x2a>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002938:	d108      	bne.n	800294c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e00b      	b.n	8002964 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	2b12      	cmp	r3, #18
 8002952:	d107      	bne.n	8002964 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002962:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f9b3 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298a:	d103      	bne.n	8002994 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e035      	b.n	8002a04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a0:	d108      	bne.n	80029b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	e01b      	b.n	80029ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029b4:	897b      	ldrh	r3, [r7, #10]
 80029b6:	11db      	asrs	r3, r3, #7
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f003 0306 	and.w	r3, r3, #6
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f063 030f 	orn	r3, r3, #15
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <I2C_MasterRequestWrite+0xfc>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f9d9 	bl	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e010      	b.n	8002a04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029e2:	897b      	ldrh	r3, [r7, #10]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4907      	ldr	r1, [pc, #28]	; (8002a10 <I2C_MasterRequestWrite+0x100>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f9c9 	bl	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010008 	.word	0x00010008
 8002a10:	00010002 	.word	0x00010002

08002a14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	460b      	mov	r3, r1
 8002a22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d006      	beq.n	8002a4e <I2C_MasterRequestRead+0x3a>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d003      	beq.n	8002a4e <I2C_MasterRequestRead+0x3a>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a4c:	d108      	bne.n	8002a60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e00b      	b.n	8002a78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	2b11      	cmp	r3, #17
 8002a66:	d107      	bne.n	8002a78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f929 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d103      	bne.n	8002aa8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e079      	b.n	8002ba0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab4:	d108      	bne.n	8002ac8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	e05f      	b.n	8002b88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ac8:	897b      	ldrh	r3, [r7, #10]
 8002aca:	11db      	asrs	r3, r3, #7
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f003 0306 	and.w	r3, r3, #6
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f063 030f 	orn	r3, r3, #15
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4930      	ldr	r1, [pc, #192]	; (8002ba8 <I2C_MasterRequestRead+0x194>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f94f 	bl	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e054      	b.n	8002ba0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002af6:	897b      	ldrh	r3, [r7, #10]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4929      	ldr	r1, [pc, #164]	; (8002bac <I2C_MasterRequestRead+0x198>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f93f 	bl	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e044      	b.n	8002ba0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f8c7 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00d      	beq.n	8002b70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b62:	d103      	bne.n	8002b6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e017      	b.n	8002ba0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b70:	897b      	ldrh	r3, [r7, #10]
 8002b72:	11db      	asrs	r3, r3, #7
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 0306 	and.w	r3, r3, #6
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f063 030e 	orn	r3, r3, #14
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <I2C_MasterRequestRead+0x198>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f8fb 	bl	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	00010008 	.word	0x00010008
 8002bac:	00010002 	.word	0x00010002

08002bb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f878 	bl	8002cdc <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d103      	bne.n	8002c0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e05f      	b.n	8002cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	492d      	ldr	r1, [pc, #180]	; (8002cd8 <I2C_RequestMemoryWrite+0x128>)
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f8b0 	bl	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04c      	b.n	8002cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	6a39      	ldr	r1, [r7, #32]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f91a 	bl	8002e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d107      	bne.n	8002c72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e02b      	b.n	8002cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	e021      	b.n	8002ccc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c88:	893b      	ldrh	r3, [r7, #8]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	6a39      	ldr	r1, [r7, #32]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f8f4 	bl	8002e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d107      	bne.n	8002cbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e005      	b.n	8002cce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc2:	893b      	ldrh	r3, [r7, #8]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	00010002 	.word	0x00010002

08002cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cec:	e025      	b.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d021      	beq.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fe fcc9 	bl	800168c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e023      	b.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10d      	bne.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf0c      	ite	eq
 8002d56:	2301      	moveq	r3, #1
 8002d58:	2300      	movne	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	e00c      	b.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d0b6      	beq.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d98:	e051      	b.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da8:	d123      	bne.n	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f043 0204 	orr.w	r2, r3, #4
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e046      	b.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d021      	beq.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe fc47 	bl	800168c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d116      	bne.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e020      	b.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10c      	bne.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4013      	ands	r3, r2
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf14      	ite	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	2300      	moveq	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	e00b      	b.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d18d      	bne.n	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e94:	e02d      	b.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f8ce 	bl	8003038 <I2C_IsAcknowledgeFailed>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e02d      	b.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d021      	beq.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7fe fbed 	bl	800168c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d116      	bne.n	8002ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e007      	b.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	d1ca      	bne.n	8002e96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f16:	e02d      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f88d 	bl	8003038 <I2C_IsAcknowledgeFailed>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e02d      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d021      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f30:	f7fe fbac 	bl	800168c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d1ca      	bne.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f98:	e042      	b.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d119      	bne.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0210 	mvn.w	r2, #16
 8002fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e029      	b.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fdc:	f7fe fb56 	bl	800168c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e007      	b.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d1b5      	bne.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304e:	d11b      	bne.n	8003088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e267      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d00c      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4b85      	ldr	r3, [pc, #532]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b7e      	ldr	r3, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e242      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b70      	ldr	r3, [pc, #448]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6f      	ldr	r2, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6c      	ldr	r2, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b69      	ldr	r3, [pc, #420]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe fa9c 	bl	800168c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fa98 	bl	800168c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e207      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5b      	ldr	r3, [pc, #364]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fa88 	bl	800168c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fa84 	bl	800168c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1f3      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b51      	ldr	r3, [pc, #324]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c7      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4937      	ldr	r1, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x244>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fa3d 	bl	800168c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe fa39 	bl	800168c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a8      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4925      	ldr	r1, [pc, #148]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x244>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fa1c 	bl	800168c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7fe fa18 	bl	800168c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e187      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d036      	beq.n	80032f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x248>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe f9fc 	bl	800168c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003298:	f7fe f9f8 	bl	800168c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e167      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
 80032b6:	e01b      	b.n	80032f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_OscConfig+0x248>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032be:	f7fe f9e5 	bl	800168c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e00e      	b.n	80032e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe f9e1 	bl	800168c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d907      	bls.n	80032e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e150      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470000 	.word	0x42470000
 80032e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ea      	bne.n	80032c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8097 	beq.w	800342c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a7c      	ldr	r2, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b77      	ldr	r3, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b74      	ldr	r3, [pc, #464]	; (800350c <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a73      	ldr	r2, [pc, #460]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe f9a1 	bl	800168c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fe f99d 	bl	800168c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e10c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b6a      	ldr	r3, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x2ea>
 8003374:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	e01c      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x30c>
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5b      	ldr	r2, [pc, #364]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 80033a4:	4b58      	ldr	r3, [pc, #352]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	4b55      	ldr	r3, [pc, #340]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a54      	ldr	r2, [pc, #336]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe f962 	bl	800168c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe f95e 	bl	800168c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0cb      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCC_OscConfig+0x334>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fe f94c 	bl	800168c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe f948 	bl	800168c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0b5      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a1 	beq.w	8003578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d05c      	beq.n	80034fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d141      	bne.n	80034ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe f91c 	bl	800168c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe f918 	bl	800168c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e087      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe f8f1 	bl	800168c <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe f8ed 	bl	800168c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e05c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x416>
 80034cc:	e054      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe f8da 	bl	800168c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe f8d6 	bl	800168c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e045      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x444>
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e038      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
 8003510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x4ec>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d028      	beq.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d121      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d11a      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0cc      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d90c      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b8      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a58      	ldr	r2, [pc, #352]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	494d      	ldr	r1, [pc, #308]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d119      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e07f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e067      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4934      	ldr	r1, [pc, #208]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fe f808 	bl	800168c <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe f804 	bl	800168c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20c      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	490a      	ldr	r1, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd ff68 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00
 8003744:	40023800 	.word	0x40023800
 8003748:	08004df0 	.word	0x08004df0
 800374c:	20000000 	.word	0x20000000
 8003750:	20000008 	.word	0x20000008

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b094      	sub	sp, #80	; 0x50
 800375a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	647b      	str	r3, [r7, #68]	; 0x44
 8003760:	2300      	movs	r3, #0
 8003762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003764:	2300      	movs	r3, #0
 8003766:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376c:	4b79      	ldr	r3, [pc, #484]	; (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d00d      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x40>
 8003778:	2b08      	cmp	r3, #8
 800377a:	f200 80e1 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x1ec>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x34>
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x3a>
 8003786:	e0db      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b73      	ldr	r3, [pc, #460]	; (8003958 <HAL_RCC_GetSysClockFreq+0x204>)
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800378c:	e0db      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378e:	4b73      	ldr	r3, [pc, #460]	; (800395c <HAL_RCC_GetSysClockFreq+0x208>)
 8003790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003792:	e0d8      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003794:	4b6f      	ldr	r3, [pc, #444]	; (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379e:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d063      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037bc:	633b      	str	r3, [r7, #48]	; 0x30
 80037be:	2300      	movs	r3, #0
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
 80037c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037c6:	4622      	mov	r2, r4
 80037c8:	462b      	mov	r3, r5
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	0159      	lsls	r1, r3, #5
 80037d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d8:	0150      	lsls	r0, r2, #5
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4621      	mov	r1, r4
 80037e0:	1a51      	subs	r1, r2, r1
 80037e2:	6139      	str	r1, [r7, #16]
 80037e4:	4629      	mov	r1, r5
 80037e6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f8:	4659      	mov	r1, fp
 80037fa:	018b      	lsls	r3, r1, #6
 80037fc:	4651      	mov	r1, sl
 80037fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003802:	4651      	mov	r1, sl
 8003804:	018a      	lsls	r2, r1, #6
 8003806:	4651      	mov	r1, sl
 8003808:	ebb2 0801 	subs.w	r8, r2, r1
 800380c:	4659      	mov	r1, fp
 800380e:	eb63 0901 	sbc.w	r9, r3, r1
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003826:	4690      	mov	r8, r2
 8003828:	4699      	mov	r9, r3
 800382a:	4623      	mov	r3, r4
 800382c:	eb18 0303 	adds.w	r3, r8, r3
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	462b      	mov	r3, r5
 8003834:	eb49 0303 	adc.w	r3, r9, r3
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003846:	4629      	mov	r1, r5
 8003848:	024b      	lsls	r3, r1, #9
 800384a:	4621      	mov	r1, r4
 800384c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003850:	4621      	mov	r1, r4
 8003852:	024a      	lsls	r2, r1, #9
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385a:	2200      	movs	r2, #0
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
 800385e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003864:	f7fc febc 	bl	80005e0 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4613      	mov	r3, r2
 800386e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003870:	e058      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003872:	4b38      	ldr	r3, [pc, #224]	; (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	2200      	movs	r2, #0
 800387a:	4618      	mov	r0, r3
 800387c:	4611      	mov	r1, r2
 800387e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	f04f 0000 	mov.w	r0, #0
 8003894:	f04f 0100 	mov.w	r1, #0
 8003898:	0159      	lsls	r1, r3, #5
 800389a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800389e:	0150      	lsls	r0, r2, #5
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4641      	mov	r1, r8
 80038a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038aa:	4649      	mov	r1, r9
 80038ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c4:	ebb2 040a 	subs.w	r4, r2, sl
 80038c8:	eb63 050b 	sbc.w	r5, r3, fp
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	00eb      	lsls	r3, r5, #3
 80038d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038da:	00e2      	lsls	r2, r4, #3
 80038dc:	4614      	mov	r4, r2
 80038de:	461d      	mov	r5, r3
 80038e0:	4643      	mov	r3, r8
 80038e2:	18e3      	adds	r3, r4, r3
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	464b      	mov	r3, r9
 80038e8:	eb45 0303 	adc.w	r3, r5, r3
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038fa:	4629      	mov	r1, r5
 80038fc:	028b      	lsls	r3, r1, #10
 80038fe:	4621      	mov	r1, r4
 8003900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003904:	4621      	mov	r1, r4
 8003906:	028a      	lsls	r2, r1, #10
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390e:	2200      	movs	r2, #0
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	61fa      	str	r2, [r7, #28]
 8003914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003918:	f7fc fe62 	bl	80005e0 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003934:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetSysClockFreq+0x204>)
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003948:	4618      	mov	r0, r3
 800394a:	3750      	adds	r7, #80	; 0x50
 800394c:	46bd      	mov	sp, r7
 800394e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	00f42400 	.word	0x00f42400
 800395c:	007a1200 	.word	0x007a1200

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800397c:	f7ff fff0 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	; (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	08004e00 	.word	0x08004e00

080039a0 <__errno>:
 80039a0:	4b01      	ldr	r3, [pc, #4]	; (80039a8 <__errno+0x8>)
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000010 	.word	0x20000010

080039ac <__libc_init_array>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4d0d      	ldr	r5, [pc, #52]	; (80039e4 <__libc_init_array+0x38>)
 80039b0:	4c0d      	ldr	r4, [pc, #52]	; (80039e8 <__libc_init_array+0x3c>)
 80039b2:	1b64      	subs	r4, r4, r5
 80039b4:	10a4      	asrs	r4, r4, #2
 80039b6:	2600      	movs	r6, #0
 80039b8:	42a6      	cmp	r6, r4
 80039ba:	d109      	bne.n	80039d0 <__libc_init_array+0x24>
 80039bc:	4d0b      	ldr	r5, [pc, #44]	; (80039ec <__libc_init_array+0x40>)
 80039be:	4c0c      	ldr	r4, [pc, #48]	; (80039f0 <__libc_init_array+0x44>)
 80039c0:	f001 fa0a 	bl	8004dd8 <_init>
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	2600      	movs	r6, #0
 80039ca:	42a6      	cmp	r6, r4
 80039cc:	d105      	bne.n	80039da <__libc_init_array+0x2e>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d4:	4798      	blx	r3
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7ee      	b.n	80039b8 <__libc_init_array+0xc>
 80039da:	f855 3b04 	ldr.w	r3, [r5], #4
 80039de:	4798      	blx	r3
 80039e0:	3601      	adds	r6, #1
 80039e2:	e7f2      	b.n	80039ca <__libc_init_array+0x1e>
 80039e4:	080051fc 	.word	0x080051fc
 80039e8:	080051fc 	.word	0x080051fc
 80039ec:	080051fc 	.word	0x080051fc
 80039f0:	08005200 	.word	0x08005200

080039f4 <memset>:
 80039f4:	4402      	add	r2, r0
 80039f6:	4603      	mov	r3, r0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d100      	bne.n	80039fe <memset+0xa>
 80039fc:	4770      	bx	lr
 80039fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003a02:	e7f9      	b.n	80039f8 <memset+0x4>

08003a04 <sinf>:
 8003a04:	ee10 3a10 	vmov	r3, s0
 8003a08:	b507      	push	{r0, r1, r2, lr}
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <sinf+0x84>)
 8003a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a10:	4293      	cmp	r3, r2
 8003a12:	dc07      	bgt.n	8003a24 <sinf+0x20>
 8003a14:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003a8c <sinf+0x88>
 8003a18:	2000      	movs	r0, #0
 8003a1a:	b003      	add	sp, #12
 8003a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a20:	f001 b8a2 	b.w	8004b68 <__kernel_sinf>
 8003a24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003a28:	db04      	blt.n	8003a34 <sinf+0x30>
 8003a2a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003a2e:	b003      	add	sp, #12
 8003a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a34:	4668      	mov	r0, sp
 8003a36:	f000 fc81 	bl	800433c <__ieee754_rem_pio2f>
 8003a3a:	f000 0003 	and.w	r0, r0, #3
 8003a3e:	2801      	cmp	r0, #1
 8003a40:	d00a      	beq.n	8003a58 <sinf+0x54>
 8003a42:	2802      	cmp	r0, #2
 8003a44:	d00f      	beq.n	8003a66 <sinf+0x62>
 8003a46:	b9c0      	cbnz	r0, 8003a7a <sinf+0x76>
 8003a48:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a4c:	ed9d 0a00 	vldr	s0, [sp]
 8003a50:	2001      	movs	r0, #1
 8003a52:	f001 f889 	bl	8004b68 <__kernel_sinf>
 8003a56:	e7ea      	b.n	8003a2e <sinf+0x2a>
 8003a58:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a5c:	ed9d 0a00 	vldr	s0, [sp]
 8003a60:	f000 fdac 	bl	80045bc <__kernel_cosf>
 8003a64:	e7e3      	b.n	8003a2e <sinf+0x2a>
 8003a66:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a6a:	ed9d 0a00 	vldr	s0, [sp]
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f001 f87a 	bl	8004b68 <__kernel_sinf>
 8003a74:	eeb1 0a40 	vneg.f32	s0, s0
 8003a78:	e7d9      	b.n	8003a2e <sinf+0x2a>
 8003a7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a7e:	ed9d 0a00 	vldr	s0, [sp]
 8003a82:	f000 fd9b 	bl	80045bc <__kernel_cosf>
 8003a86:	e7f5      	b.n	8003a74 <sinf+0x70>
 8003a88:	3f490fd8 	.word	0x3f490fd8
 8003a8c:	00000000 	.word	0x00000000

08003a90 <asinf>:
 8003a90:	b508      	push	{r3, lr}
 8003a92:	ed2d 8b02 	vpush	{d8}
 8003a96:	eeb0 8a40 	vmov.f32	s16, s0
 8003a9a:	f000 f89b 	bl	8003bd4 <__ieee754_asinf>
 8003a9e:	eeb4 8a48 	vcmp.f32	s16, s16
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	eef0 8a40 	vmov.f32	s17, s0
 8003aaa:	d615      	bvs.n	8003ad8 <asinf+0x48>
 8003aac:	eeb0 0a48 	vmov.f32	s0, s16
 8003ab0:	f001 f8c4 	bl	8004c3c <fabsf>
 8003ab4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003ab8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	dd0a      	ble.n	8003ad8 <asinf+0x48>
 8003ac2:	f7ff ff6d 	bl	80039a0 <__errno>
 8003ac6:	ecbd 8b02 	vpop	{d8}
 8003aca:	2321      	movs	r3, #33	; 0x21
 8003acc:	6003      	str	r3, [r0, #0]
 8003ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ad2:	4804      	ldr	r0, [pc, #16]	; (8003ae4 <asinf+0x54>)
 8003ad4:	f001 b908 	b.w	8004ce8 <nanf>
 8003ad8:	eeb0 0a68 	vmov.f32	s0, s17
 8003adc:	ecbd 8b02 	vpop	{d8}
 8003ae0:	bd08      	pop	{r3, pc}
 8003ae2:	bf00      	nop
 8003ae4:	08004e08 	.word	0x08004e08

08003ae8 <powf>:
 8003ae8:	b508      	push	{r3, lr}
 8003aea:	ed2d 8b04 	vpush	{d8-d9}
 8003aee:	eeb0 8a60 	vmov.f32	s16, s1
 8003af2:	eeb0 9a40 	vmov.f32	s18, s0
 8003af6:	f000 f953 	bl	8003da0 <__ieee754_powf>
 8003afa:	eeb4 8a48 	vcmp.f32	s16, s16
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	eef0 8a40 	vmov.f32	s17, s0
 8003b06:	d63e      	bvs.n	8003b86 <powf+0x9e>
 8003b08:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b10:	d112      	bne.n	8003b38 <powf+0x50>
 8003b12:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	d039      	beq.n	8003b90 <powf+0xa8>
 8003b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8003b20:	f001 f893 	bl	8004c4a <finitef>
 8003b24:	b378      	cbz	r0, 8003b86 <powf+0x9e>
 8003b26:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2e:	d52a      	bpl.n	8003b86 <powf+0x9e>
 8003b30:	f7ff ff36 	bl	80039a0 <__errno>
 8003b34:	2322      	movs	r3, #34	; 0x22
 8003b36:	e014      	b.n	8003b62 <powf+0x7a>
 8003b38:	f001 f887 	bl	8004c4a <finitef>
 8003b3c:	b998      	cbnz	r0, 8003b66 <powf+0x7e>
 8003b3e:	eeb0 0a49 	vmov.f32	s0, s18
 8003b42:	f001 f882 	bl	8004c4a <finitef>
 8003b46:	b170      	cbz	r0, 8003b66 <powf+0x7e>
 8003b48:	eeb0 0a48 	vmov.f32	s0, s16
 8003b4c:	f001 f87d 	bl	8004c4a <finitef>
 8003b50:	b148      	cbz	r0, 8003b66 <powf+0x7e>
 8003b52:	eef4 8a68 	vcmp.f32	s17, s17
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	d7e9      	bvc.n	8003b30 <powf+0x48>
 8003b5c:	f7ff ff20 	bl	80039a0 <__errno>
 8003b60:	2321      	movs	r3, #33	; 0x21
 8003b62:	6003      	str	r3, [r0, #0]
 8003b64:	e00f      	b.n	8003b86 <powf+0x9e>
 8003b66:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	d10a      	bne.n	8003b86 <powf+0x9e>
 8003b70:	eeb0 0a49 	vmov.f32	s0, s18
 8003b74:	f001 f869 	bl	8004c4a <finitef>
 8003b78:	b128      	cbz	r0, 8003b86 <powf+0x9e>
 8003b7a:	eeb0 0a48 	vmov.f32	s0, s16
 8003b7e:	f001 f864 	bl	8004c4a <finitef>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d1d4      	bne.n	8003b30 <powf+0x48>
 8003b86:	eeb0 0a68 	vmov.f32	s0, s17
 8003b8a:	ecbd 8b04 	vpop	{d8-d9}
 8003b8e:	bd08      	pop	{r3, pc}
 8003b90:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003b94:	e7f7      	b.n	8003b86 <powf+0x9e>
	...

08003b98 <sqrtf>:
 8003b98:	b508      	push	{r3, lr}
 8003b9a:	ed2d 8b02 	vpush	{d8}
 8003b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8003ba2:	f000 fd07 	bl	80045b4 <__ieee754_sqrtf>
 8003ba6:	eeb4 8a48 	vcmp.f32	s16, s16
 8003baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bae:	d60c      	bvs.n	8003bca <sqrtf+0x32>
 8003bb0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8003bd0 <sqrtf+0x38>
 8003bb4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbc:	d505      	bpl.n	8003bca <sqrtf+0x32>
 8003bbe:	f7ff feef 	bl	80039a0 <__errno>
 8003bc2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8003bc6:	2321      	movs	r3, #33	; 0x21
 8003bc8:	6003      	str	r3, [r0, #0]
 8003bca:	ecbd 8b02 	vpop	{d8}
 8003bce:	bd08      	pop	{r3, pc}
 8003bd0:	00000000 	.word	0x00000000

08003bd4 <__ieee754_asinf>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	ee10 5a10 	vmov	r5, s0
 8003bda:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8003bde:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8003be2:	ed2d 8b04 	vpush	{d8-d9}
 8003be6:	d10c      	bne.n	8003c02 <__ieee754_asinf+0x2e>
 8003be8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8003d60 <__ieee754_asinf+0x18c>
 8003bec:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003d64 <__ieee754_asinf+0x190>
 8003bf0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003bf4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfc:	ecbd 8b04 	vpop	{d8-d9}
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
 8003c02:	dd04      	ble.n	8003c0e <__ieee754_asinf+0x3a>
 8003c04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003c08:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003c0c:	e7f6      	b.n	8003bfc <__ieee754_asinf+0x28>
 8003c0e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8003c12:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8003c16:	da0b      	bge.n	8003c30 <__ieee754_asinf+0x5c>
 8003c18:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003c1c:	da52      	bge.n	8003cc4 <__ieee754_asinf+0xf0>
 8003c1e:	eddf 7a52 	vldr	s15, [pc, #328]	; 8003d68 <__ieee754_asinf+0x194>
 8003c22:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003c26:	eef4 7ae8 	vcmpe.f32	s15, s17
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	dce5      	bgt.n	8003bfc <__ieee754_asinf+0x28>
 8003c30:	f001 f804 	bl	8004c3c <fabsf>
 8003c34:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8003c38:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8003c3c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003c40:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8003d6c <__ieee754_asinf+0x198>
 8003c44:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003d70 <__ieee754_asinf+0x19c>
 8003c48:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8003d74 <__ieee754_asinf+0x1a0>
 8003c4c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8003c50:	eddf 7a49 	vldr	s15, [pc, #292]	; 8003d78 <__ieee754_asinf+0x1a4>
 8003c54:	eee7 7a08 	vfma.f32	s15, s14, s16
 8003c58:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003d7c <__ieee754_asinf+0x1a8>
 8003c5c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8003c60:	eddf 7a47 	vldr	s15, [pc, #284]	; 8003d80 <__ieee754_asinf+0x1ac>
 8003c64:	eee7 7a08 	vfma.f32	s15, s14, s16
 8003c68:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003d84 <__ieee754_asinf+0x1b0>
 8003c6c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8003c70:	eddf 7a45 	vldr	s15, [pc, #276]	; 8003d88 <__ieee754_asinf+0x1b4>
 8003c74:	eee8 7a07 	vfma.f32	s15, s16, s14
 8003c78:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003d8c <__ieee754_asinf+0x1b8>
 8003c7c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8003c80:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003d90 <__ieee754_asinf+0x1bc>
 8003c84:	eee7 7a08 	vfma.f32	s15, s14, s16
 8003c88:	eeb0 0a48 	vmov.f32	s0, s16
 8003c8c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8003c90:	f000 fc90 	bl	80045b4 <__ieee754_sqrtf>
 8003c94:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <__ieee754_asinf+0x1c0>)
 8003c96:	ee29 9a08 	vmul.f32	s18, s18, s16
 8003c9a:	429c      	cmp	r4, r3
 8003c9c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8003ca0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ca4:	dd3d      	ble.n	8003d22 <__ieee754_asinf+0x14e>
 8003ca6:	eea0 0a06 	vfma.f32	s0, s0, s12
 8003caa:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8003d98 <__ieee754_asinf+0x1c4>
 8003cae:	eee0 7a26 	vfma.f32	s15, s0, s13
 8003cb2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003d64 <__ieee754_asinf+0x190>
 8003cb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	bfd8      	it	le
 8003cbe:	eeb1 0a40 	vnegle.f32	s0, s0
 8003cc2:	e79b      	b.n	8003bfc <__ieee754_asinf+0x28>
 8003cc4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003cc8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003d6c <__ieee754_asinf+0x198>
 8003ccc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003d70 <__ieee754_asinf+0x19c>
 8003cd0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8003d84 <__ieee754_asinf+0x1b0>
 8003cd4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8003cd8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8003d78 <__ieee754_asinf+0x1a4>
 8003cdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003ce0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003d7c <__ieee754_asinf+0x1a8>
 8003ce4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003ce8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003d80 <__ieee754_asinf+0x1ac>
 8003cec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003cf0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003d74 <__ieee754_asinf+0x1a0>
 8003cf4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003cf8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8003d88 <__ieee754_asinf+0x1b4>
 8003cfc:	eee7 6a86 	vfma.f32	s13, s15, s12
 8003d00:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8003d8c <__ieee754_asinf+0x1b8>
 8003d04:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8003d08:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003d90 <__ieee754_asinf+0x1bc>
 8003d0c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d14:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8003d18:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8003d1c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8003d20:	e76c      	b.n	8003bfc <__ieee754_asinf+0x28>
 8003d22:	ee10 3a10 	vmov	r3, s0
 8003d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d2a:	f023 030f 	bic.w	r3, r3, #15
 8003d2e:	ee07 3a10 	vmov	s14, r3
 8003d32:	eea7 8a47 	vfms.f32	s16, s14, s14
 8003d36:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003d3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003d3e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8003d42:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003d60 <__ieee754_asinf+0x18c>
 8003d46:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8003d4a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8003d4e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003d9c <__ieee754_asinf+0x1c8>
 8003d52:	eeb0 6a40 	vmov.f32	s12, s0
 8003d56:	eea7 6a66 	vfms.f32	s12, s14, s13
 8003d5a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003d5e:	e7aa      	b.n	8003cb6 <__ieee754_asinf+0xe2>
 8003d60:	b33bbd2e 	.word	0xb33bbd2e
 8003d64:	3fc90fdb 	.word	0x3fc90fdb
 8003d68:	7149f2ca 	.word	0x7149f2ca
 8003d6c:	3811ef08 	.word	0x3811ef08
 8003d70:	3a4f7f04 	.word	0x3a4f7f04
 8003d74:	3e2aaaab 	.word	0x3e2aaaab
 8003d78:	bd241146 	.word	0xbd241146
 8003d7c:	3e4e0aa8 	.word	0x3e4e0aa8
 8003d80:	bea6b090 	.word	0xbea6b090
 8003d84:	3d9dc62e 	.word	0x3d9dc62e
 8003d88:	bf303361 	.word	0xbf303361
 8003d8c:	4001572d 	.word	0x4001572d
 8003d90:	c019d139 	.word	0xc019d139
 8003d94:	3f799999 	.word	0x3f799999
 8003d98:	333bbd2e 	.word	0x333bbd2e
 8003d9c:	3f490fdb 	.word	0x3f490fdb

08003da0 <__ieee754_powf>:
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	ee10 4a90 	vmov	r4, s1
 8003da8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8003dac:	ed2d 8b02 	vpush	{d8}
 8003db0:	ee10 6a10 	vmov	r6, s0
 8003db4:	eeb0 8a40 	vmov.f32	s16, s0
 8003db8:	eef0 8a60 	vmov.f32	s17, s1
 8003dbc:	d10c      	bne.n	8003dd8 <__ieee754_powf+0x38>
 8003dbe:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8003dc2:	0076      	lsls	r6, r6, #1
 8003dc4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8003dc8:	f240 8296 	bls.w	80042f8 <__ieee754_powf+0x558>
 8003dcc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8003dd0:	ecbd 8b02 	vpop	{d8}
 8003dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003ddc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8003de0:	dcf4      	bgt.n	8003dcc <__ieee754_powf+0x2c>
 8003de2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8003de6:	dd08      	ble.n	8003dfa <__ieee754_powf+0x5a>
 8003de8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8003dec:	d1ee      	bne.n	8003dcc <__ieee754_powf+0x2c>
 8003dee:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8003df2:	0064      	lsls	r4, r4, #1
 8003df4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8003df8:	e7e6      	b.n	8003dc8 <__ieee754_powf+0x28>
 8003dfa:	2e00      	cmp	r6, #0
 8003dfc:	da20      	bge.n	8003e40 <__ieee754_powf+0xa0>
 8003dfe:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8003e02:	da2d      	bge.n	8003e60 <__ieee754_powf+0xc0>
 8003e04:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8003e08:	f2c0 827f 	blt.w	800430a <__ieee754_powf+0x56a>
 8003e0c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8003e10:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003e14:	fa48 f703 	asr.w	r7, r8, r3
 8003e18:	fa07 f303 	lsl.w	r3, r7, r3
 8003e1c:	4543      	cmp	r3, r8
 8003e1e:	f040 8274 	bne.w	800430a <__ieee754_powf+0x56a>
 8003e22:	f007 0701 	and.w	r7, r7, #1
 8003e26:	f1c7 0702 	rsb	r7, r7, #2
 8003e2a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8003e2e:	d11f      	bne.n	8003e70 <__ieee754_powf+0xd0>
 8003e30:	2c00      	cmp	r4, #0
 8003e32:	f280 8267 	bge.w	8004304 <__ieee754_powf+0x564>
 8003e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003e3a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8003e3e:	e7c7      	b.n	8003dd0 <__ieee754_powf+0x30>
 8003e40:	2700      	movs	r7, #0
 8003e42:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8003e46:	d1f0      	bne.n	8003e2a <__ieee754_powf+0x8a>
 8003e48:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8003e4c:	f000 8254 	beq.w	80042f8 <__ieee754_powf+0x558>
 8003e50:	dd08      	ble.n	8003e64 <__ieee754_powf+0xc4>
 8003e52:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800415c <__ieee754_powf+0x3bc>
 8003e56:	2c00      	cmp	r4, #0
 8003e58:	bfa8      	it	ge
 8003e5a:	eeb0 0a68 	vmovge.f32	s0, s17
 8003e5e:	e7b7      	b.n	8003dd0 <__ieee754_powf+0x30>
 8003e60:	2702      	movs	r7, #2
 8003e62:	e7ee      	b.n	8003e42 <__ieee754_powf+0xa2>
 8003e64:	2c00      	cmp	r4, #0
 8003e66:	f280 824a 	bge.w	80042fe <__ieee754_powf+0x55e>
 8003e6a:	eeb1 0a68 	vneg.f32	s0, s17
 8003e6e:	e7af      	b.n	8003dd0 <__ieee754_powf+0x30>
 8003e70:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003e74:	d102      	bne.n	8003e7c <__ieee754_powf+0xdc>
 8003e76:	ee28 0a08 	vmul.f32	s0, s16, s16
 8003e7a:	e7a9      	b.n	8003dd0 <__ieee754_powf+0x30>
 8003e7c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8003e80:	eeb0 0a48 	vmov.f32	s0, s16
 8003e84:	d107      	bne.n	8003e96 <__ieee754_powf+0xf6>
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	db05      	blt.n	8003e96 <__ieee754_powf+0xf6>
 8003e8a:	ecbd 8b02 	vpop	{d8}
 8003e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e92:	f000 bb8f 	b.w	80045b4 <__ieee754_sqrtf>
 8003e96:	f000 fed1 	bl	8004c3c <fabsf>
 8003e9a:	b125      	cbz	r5, 8003ea6 <__ieee754_powf+0x106>
 8003e9c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8003ea0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8003ea4:	d116      	bne.n	8003ed4 <__ieee754_powf+0x134>
 8003ea6:	2c00      	cmp	r4, #0
 8003ea8:	bfbc      	itt	lt
 8003eaa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8003eae:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8003eb2:	2e00      	cmp	r6, #0
 8003eb4:	da8c      	bge.n	8003dd0 <__ieee754_powf+0x30>
 8003eb6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8003eba:	ea55 0307 	orrs.w	r3, r5, r7
 8003ebe:	d104      	bne.n	8003eca <__ieee754_powf+0x12a>
 8003ec0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003ec4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003ec8:	e782      	b.n	8003dd0 <__ieee754_powf+0x30>
 8003eca:	2f01      	cmp	r7, #1
 8003ecc:	d180      	bne.n	8003dd0 <__ieee754_powf+0x30>
 8003ece:	eeb1 0a40 	vneg.f32	s0, s0
 8003ed2:	e77d      	b.n	8003dd0 <__ieee754_powf+0x30>
 8003ed4:	0ff0      	lsrs	r0, r6, #31
 8003ed6:	3801      	subs	r0, #1
 8003ed8:	ea57 0300 	orrs.w	r3, r7, r0
 8003edc:	d104      	bne.n	8003ee8 <__ieee754_powf+0x148>
 8003ede:	ee38 8a48 	vsub.f32	s16, s16, s16
 8003ee2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8003ee6:	e773      	b.n	8003dd0 <__ieee754_powf+0x30>
 8003ee8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8003eec:	dd74      	ble.n	8003fd8 <__ieee754_powf+0x238>
 8003eee:	4b9c      	ldr	r3, [pc, #624]	; (8004160 <__ieee754_powf+0x3c0>)
 8003ef0:	429d      	cmp	r5, r3
 8003ef2:	dc08      	bgt.n	8003f06 <__ieee754_powf+0x166>
 8003ef4:	2c00      	cmp	r4, #0
 8003ef6:	da0b      	bge.n	8003f10 <__ieee754_powf+0x170>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	ecbd 8b02 	vpop	{d8}
 8003efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f02:	f000 be95 	b.w	8004c30 <__math_oflowf>
 8003f06:	4b97      	ldr	r3, [pc, #604]	; (8004164 <__ieee754_powf+0x3c4>)
 8003f08:	429d      	cmp	r5, r3
 8003f0a:	dd08      	ble.n	8003f1e <__ieee754_powf+0x17e>
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	dcf3      	bgt.n	8003ef8 <__ieee754_powf+0x158>
 8003f10:	2000      	movs	r0, #0
 8003f12:	ecbd 8b02 	vpop	{d8}
 8003f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1a:	f000 be83 	b.w	8004c24 <__math_uflowf>
 8003f1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003f22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003f26:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004168 <__ieee754_powf+0x3c8>
 8003f2a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8003f2e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8003f32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003f36:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8003f3a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800416c <__ieee754_powf+0x3cc>
 8003f46:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8003f4a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8004170 <__ieee754_powf+0x3d0>
 8003f4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003f52:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004174 <__ieee754_powf+0x3d4>
 8003f56:	eef0 6a67 	vmov.f32	s13, s15
 8003f5a:	eee0 6a07 	vfma.f32	s13, s0, s14
 8003f5e:	ee16 3a90 	vmov	r3, s13
 8003f62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003f66:	f023 030f 	bic.w	r3, r3, #15
 8003f6a:	ee00 3a90 	vmov	s1, r3
 8003f6e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8003f72:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003f76:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8003f7a:	f024 040f 	bic.w	r4, r4, #15
 8003f7e:	ee07 4a10 	vmov	s14, r4
 8003f82:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8003f86:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8003f92:	3f01      	subs	r7, #1
 8003f94:	ea57 0200 	orrs.w	r2, r7, r0
 8003f98:	ee07 4a10 	vmov	s14, r4
 8003f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003fa4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8003fa8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003fac:	ee17 4a10 	vmov	r4, s14
 8003fb0:	bf08      	it	eq
 8003fb2:	eeb0 8a40 	vmoveq.f32	s16, s0
 8003fb6:	2c00      	cmp	r4, #0
 8003fb8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003fbc:	f340 817e 	ble.w	80042bc <__ieee754_powf+0x51c>
 8003fc0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8003fc4:	f340 80f8 	ble.w	80041b8 <__ieee754_powf+0x418>
 8003fc8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	bf4c      	ite	mi
 8003fd2:	2001      	movmi	r0, #1
 8003fd4:	2000      	movpl	r0, #0
 8003fd6:	e790      	b.n	8003efa <__ieee754_powf+0x15a>
 8003fd8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8003fdc:	bf01      	itttt	eq
 8003fde:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8004178 <__ieee754_powf+0x3d8>
 8003fe2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8003fe6:	f06f 0217 	mvneq.w	r2, #23
 8003fea:	ee17 5a90 	vmoveq	r5, s15
 8003fee:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8003ff2:	bf18      	it	ne
 8003ff4:	2200      	movne	r2, #0
 8003ff6:	3b7f      	subs	r3, #127	; 0x7f
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a60      	ldr	r2, [pc, #384]	; (800417c <__ieee754_powf+0x3dc>)
 8003ffc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8004000:	4295      	cmp	r5, r2
 8004002:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8004006:	dd06      	ble.n	8004016 <__ieee754_powf+0x276>
 8004008:	4a5d      	ldr	r2, [pc, #372]	; (8004180 <__ieee754_powf+0x3e0>)
 800400a:	4295      	cmp	r5, r2
 800400c:	f340 80a4 	ble.w	8004158 <__ieee754_powf+0x3b8>
 8004010:	3301      	adds	r3, #1
 8004012:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004016:	2500      	movs	r5, #0
 8004018:	4a5a      	ldr	r2, [pc, #360]	; (8004184 <__ieee754_powf+0x3e4>)
 800401a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800401e:	ee07 1a90 	vmov	s15, r1
 8004022:	ed92 7a00 	vldr	s14, [r2]
 8004026:	4a58      	ldr	r2, [pc, #352]	; (8004188 <__ieee754_powf+0x3e8>)
 8004028:	ee37 6a27 	vadd.f32	s12, s14, s15
 800402c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004030:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8004034:	1049      	asrs	r1, r1, #1
 8004036:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800403a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800403e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8004042:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8004046:	ee06 1a10 	vmov	s12, r1
 800404a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800404e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8004052:	ee14 6a90 	vmov	r6, s9
 8004056:	4016      	ands	r6, r2
 8004058:	ee05 6a90 	vmov	s11, r6
 800405c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8004060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004064:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800418c <__ieee754_powf+0x3ec>
 8004068:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800406c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8004070:	ee25 6a26 	vmul.f32	s12, s10, s13
 8004074:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004190 <__ieee754_powf+0x3f0>
 8004078:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800407c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004194 <__ieee754_powf+0x3f4>
 8004080:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004084:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004168 <__ieee754_powf+0x3c8>
 8004088:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800408c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8004198 <__ieee754_powf+0x3f8>
 8004090:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004094:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800419c <__ieee754_powf+0x3fc>
 8004098:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800409c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80040a0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80040a4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80040a8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80040ac:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80040b0:	eef0 7a45 	vmov.f32	s15, s10
 80040b4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80040b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040bc:	ee17 1a90 	vmov	r1, s15
 80040c0:	4011      	ands	r1, r2
 80040c2:	ee07 1a90 	vmov	s15, r1
 80040c6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80040ca:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80040ce:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80040d2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80040d6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80040da:	eeb0 6a47 	vmov.f32	s12, s14
 80040de:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80040e2:	ee16 1a10 	vmov	r1, s12
 80040e6:	4011      	ands	r1, r2
 80040e8:	ee06 1a90 	vmov	s13, r1
 80040ec:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80040f0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80041a0 <__ieee754_powf+0x400>
 80040f4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80041a4 <__ieee754_powf+0x404>
 80040f8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80040fc:	ee06 1a10 	vmov	s12, r1
 8004100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004104:	eddf 7a28 	vldr	s15, [pc, #160]	; 80041a8 <__ieee754_powf+0x408>
 8004108:	4928      	ldr	r1, [pc, #160]	; (80041ac <__ieee754_powf+0x40c>)
 800410a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800410e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8004112:	edd1 7a00 	vldr	s15, [r1]
 8004116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <__ieee754_powf+0x410>)
 8004120:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004124:	eef0 7a47 	vmov.f32	s15, s14
 8004128:	eee6 7a25 	vfma.f32	s15, s12, s11
 800412c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004130:	edd5 0a00 	vldr	s1, [r5]
 8004134:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413c:	ee17 3a90 	vmov	r3, s15
 8004140:	4013      	ands	r3, r2
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800414a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800414e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8004152:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004156:	e70e      	b.n	8003f76 <__ieee754_powf+0x1d6>
 8004158:	2501      	movs	r5, #1
 800415a:	e75d      	b.n	8004018 <__ieee754_powf+0x278>
 800415c:	00000000 	.word	0x00000000
 8004160:	3f7ffff3 	.word	0x3f7ffff3
 8004164:	3f800007 	.word	0x3f800007
 8004168:	3eaaaaab 	.word	0x3eaaaaab
 800416c:	3fb8aa3b 	.word	0x3fb8aa3b
 8004170:	36eca570 	.word	0x36eca570
 8004174:	3fb8aa00 	.word	0x3fb8aa00
 8004178:	4b800000 	.word	0x4b800000
 800417c:	001cc471 	.word	0x001cc471
 8004180:	005db3d6 	.word	0x005db3d6
 8004184:	08004e0c 	.word	0x08004e0c
 8004188:	fffff000 	.word	0xfffff000
 800418c:	3e6c3255 	.word	0x3e6c3255
 8004190:	3e53f142 	.word	0x3e53f142
 8004194:	3e8ba305 	.word	0x3e8ba305
 8004198:	3edb6db7 	.word	0x3edb6db7
 800419c:	3f19999a 	.word	0x3f19999a
 80041a0:	3f76384f 	.word	0x3f76384f
 80041a4:	3f763800 	.word	0x3f763800
 80041a8:	369dc3a0 	.word	0x369dc3a0
 80041ac:	08004e1c 	.word	0x08004e1c
 80041b0:	08004e14 	.word	0x08004e14
 80041b4:	3338aa3c 	.word	0x3338aa3c
 80041b8:	f040 8095 	bne.w	80042e6 <__ieee754_powf+0x546>
 80041bc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80041b4 <__ieee754_powf+0x414>
 80041c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041c4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80041c8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80041cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d0:	f73f aefa 	bgt.w	8003fc8 <__ieee754_powf+0x228>
 80041d4:	15db      	asrs	r3, r3, #23
 80041d6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80041da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80041de:	4103      	asrs	r3, r0
 80041e0:	4423      	add	r3, r4
 80041e2:	494b      	ldr	r1, [pc, #300]	; (8004310 <__ieee754_powf+0x570>)
 80041e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80041e8:	3a7f      	subs	r2, #127	; 0x7f
 80041ea:	4111      	asrs	r1, r2
 80041ec:	ea23 0101 	bic.w	r1, r3, r1
 80041f0:	ee07 1a10 	vmov	s14, r1
 80041f4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80041f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80041fc:	f1c2 0217 	rsb	r2, r2, #23
 8004200:	4110      	asrs	r0, r2
 8004202:	2c00      	cmp	r4, #0
 8004204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004208:	bfb8      	it	lt
 800420a:	4240      	neglt	r0, r0
 800420c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004210:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8004314 <__ieee754_powf+0x574>
 8004214:	eddf 6a40 	vldr	s13, [pc, #256]	; 8004318 <__ieee754_powf+0x578>
 8004218:	ee17 3a10 	vmov	r3, s14
 800421c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004220:	f023 030f 	bic.w	r3, r3, #15
 8004224:	ee07 3a10 	vmov	s14, r3
 8004228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800422c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8004230:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004234:	eddf 7a39 	vldr	s15, [pc, #228]	; 800431c <__ieee754_powf+0x57c>
 8004238:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800423c:	eef0 7a40 	vmov.f32	s15, s0
 8004240:	eee7 7a26 	vfma.f32	s15, s14, s13
 8004244:	eeb0 6a67 	vmov.f32	s12, s15
 8004248:	eea7 6a66 	vfms.f32	s12, s14, s13
 800424c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004250:	ee30 0a46 	vsub.f32	s0, s0, s12
 8004254:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004320 <__ieee754_powf+0x580>
 8004258:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004324 <__ieee754_powf+0x584>
 800425c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8004260:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8004328 <__ieee754_powf+0x588>
 8004264:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004268:	eddf 6a30 	vldr	s13, [pc, #192]	; 800432c <__ieee754_powf+0x58c>
 800426c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004270:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004330 <__ieee754_powf+0x590>
 8004274:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004278:	eef0 6a67 	vmov.f32	s13, s15
 800427c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8004280:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004284:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8004288:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800428c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8004290:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004294:	ee37 0a40 	vsub.f32	s0, s14, s0
 8004298:	ee70 7a67 	vsub.f32	s15, s0, s15
 800429c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80042a4:	ee10 3a10 	vmov	r3, s0
 80042a8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80042ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b0:	da1f      	bge.n	80042f2 <__ieee754_powf+0x552>
 80042b2:	f000 fd1f 	bl	8004cf4 <scalbnf>
 80042b6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80042ba:	e589      	b.n	8003dd0 <__ieee754_powf+0x30>
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <__ieee754_powf+0x594>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	dd07      	ble.n	80042d2 <__ieee754_powf+0x532>
 80042c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	bf4c      	ite	mi
 80042cc:	2001      	movmi	r0, #1
 80042ce:	2000      	movpl	r0, #0
 80042d0:	e61f      	b.n	8003f12 <__ieee754_powf+0x172>
 80042d2:	d108      	bne.n	80042e6 <__ieee754_powf+0x546>
 80042d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042d8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80042dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e0:	f6ff af78 	blt.w	80041d4 <__ieee754_powf+0x434>
 80042e4:	e7ed      	b.n	80042c2 <__ieee754_powf+0x522>
 80042e6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80042ea:	f73f af73 	bgt.w	80041d4 <__ieee754_powf+0x434>
 80042ee:	2000      	movs	r0, #0
 80042f0:	e78c      	b.n	800420c <__ieee754_powf+0x46c>
 80042f2:	ee00 3a10 	vmov	s0, r3
 80042f6:	e7de      	b.n	80042b6 <__ieee754_powf+0x516>
 80042f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042fc:	e568      	b.n	8003dd0 <__ieee754_powf+0x30>
 80042fe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004338 <__ieee754_powf+0x598>
 8004302:	e565      	b.n	8003dd0 <__ieee754_powf+0x30>
 8004304:	eeb0 0a48 	vmov.f32	s0, s16
 8004308:	e562      	b.n	8003dd0 <__ieee754_powf+0x30>
 800430a:	2700      	movs	r7, #0
 800430c:	e58d      	b.n	8003e2a <__ieee754_powf+0x8a>
 800430e:	bf00      	nop
 8004310:	007fffff 	.word	0x007fffff
 8004314:	35bfbe8c 	.word	0x35bfbe8c
 8004318:	3f317200 	.word	0x3f317200
 800431c:	3f317218 	.word	0x3f317218
 8004320:	b5ddea0e 	.word	0xb5ddea0e
 8004324:	3331bb4c 	.word	0x3331bb4c
 8004328:	388ab355 	.word	0x388ab355
 800432c:	bb360b61 	.word	0xbb360b61
 8004330:	3e2aaaab 	.word	0x3e2aaaab
 8004334:	43160000 	.word	0x43160000
 8004338:	00000000 	.word	0x00000000

0800433c <__ieee754_rem_pio2f>:
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	ee10 6a10 	vmov	r6, s0
 8004342:	4b8e      	ldr	r3, [pc, #568]	; (800457c <__ieee754_rem_pio2f+0x240>)
 8004344:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004348:	429d      	cmp	r5, r3
 800434a:	b087      	sub	sp, #28
 800434c:	eef0 7a40 	vmov.f32	s15, s0
 8004350:	4604      	mov	r4, r0
 8004352:	dc05      	bgt.n	8004360 <__ieee754_rem_pio2f+0x24>
 8004354:	2300      	movs	r3, #0
 8004356:	ed80 0a00 	vstr	s0, [r0]
 800435a:	6043      	str	r3, [r0, #4]
 800435c:	2000      	movs	r0, #0
 800435e:	e01a      	b.n	8004396 <__ieee754_rem_pio2f+0x5a>
 8004360:	4b87      	ldr	r3, [pc, #540]	; (8004580 <__ieee754_rem_pio2f+0x244>)
 8004362:	429d      	cmp	r5, r3
 8004364:	dc46      	bgt.n	80043f4 <__ieee754_rem_pio2f+0xb8>
 8004366:	2e00      	cmp	r6, #0
 8004368:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8004584 <__ieee754_rem_pio2f+0x248>
 800436c:	4b86      	ldr	r3, [pc, #536]	; (8004588 <__ieee754_rem_pio2f+0x24c>)
 800436e:	f025 050f 	bic.w	r5, r5, #15
 8004372:	dd1f      	ble.n	80043b4 <__ieee754_rem_pio2f+0x78>
 8004374:	429d      	cmp	r5, r3
 8004376:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800437a:	d00e      	beq.n	800439a <__ieee754_rem_pio2f+0x5e>
 800437c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800458c <__ieee754_rem_pio2f+0x250>
 8004380:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004384:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004388:	ed80 0a00 	vstr	s0, [r0]
 800438c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004390:	2001      	movs	r0, #1
 8004392:	edc4 7a01 	vstr	s15, [r4, #4]
 8004396:	b007      	add	sp, #28
 8004398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004590 <__ieee754_rem_pio2f+0x254>
 800439e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004594 <__ieee754_rem_pio2f+0x258>
 80043a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80043a6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80043aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80043ae:	edc0 6a00 	vstr	s13, [r0]
 80043b2:	e7eb      	b.n	800438c <__ieee754_rem_pio2f+0x50>
 80043b4:	429d      	cmp	r5, r3
 80043b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80043ba:	d00e      	beq.n	80043da <__ieee754_rem_pio2f+0x9e>
 80043bc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800458c <__ieee754_rem_pio2f+0x250>
 80043c0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80043c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80043c8:	ed80 0a00 	vstr	s0, [r0]
 80043cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	edc4 7a01 	vstr	s15, [r4, #4]
 80043d8:	e7dd      	b.n	8004396 <__ieee754_rem_pio2f+0x5a>
 80043da:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004590 <__ieee754_rem_pio2f+0x254>
 80043de:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004594 <__ieee754_rem_pio2f+0x258>
 80043e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80043e6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80043ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80043ee:	edc0 6a00 	vstr	s13, [r0]
 80043f2:	e7eb      	b.n	80043cc <__ieee754_rem_pio2f+0x90>
 80043f4:	4b68      	ldr	r3, [pc, #416]	; (8004598 <__ieee754_rem_pio2f+0x25c>)
 80043f6:	429d      	cmp	r5, r3
 80043f8:	dc72      	bgt.n	80044e0 <__ieee754_rem_pio2f+0x1a4>
 80043fa:	f000 fc1f 	bl	8004c3c <fabsf>
 80043fe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800459c <__ieee754_rem_pio2f+0x260>
 8004402:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004406:	eee0 7a07 	vfma.f32	s15, s0, s14
 800440a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800440e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004412:	ee17 0a90 	vmov	r0, s15
 8004416:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004584 <__ieee754_rem_pio2f+0x248>
 800441a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800441e:	281f      	cmp	r0, #31
 8004420:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800458c <__ieee754_rem_pio2f+0x250>
 8004424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004428:	eeb1 6a47 	vneg.f32	s12, s14
 800442c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004430:	ee16 2a90 	vmov	r2, s13
 8004434:	dc1c      	bgt.n	8004470 <__ieee754_rem_pio2f+0x134>
 8004436:	495a      	ldr	r1, [pc, #360]	; (80045a0 <__ieee754_rem_pio2f+0x264>)
 8004438:	1e47      	subs	r7, r0, #1
 800443a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800443e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004442:	428b      	cmp	r3, r1
 8004444:	d014      	beq.n	8004470 <__ieee754_rem_pio2f+0x134>
 8004446:	6022      	str	r2, [r4, #0]
 8004448:	ed94 7a00 	vldr	s14, [r4]
 800444c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004450:	2e00      	cmp	r6, #0
 8004452:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004456:	ed84 0a01 	vstr	s0, [r4, #4]
 800445a:	da9c      	bge.n	8004396 <__ieee754_rem_pio2f+0x5a>
 800445c:	eeb1 7a47 	vneg.f32	s14, s14
 8004460:	eeb1 0a40 	vneg.f32	s0, s0
 8004464:	ed84 7a00 	vstr	s14, [r4]
 8004468:	ed84 0a01 	vstr	s0, [r4, #4]
 800446c:	4240      	negs	r0, r0
 800446e:	e792      	b.n	8004396 <__ieee754_rem_pio2f+0x5a>
 8004470:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004474:	15eb      	asrs	r3, r5, #23
 8004476:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800447a:	2d08      	cmp	r5, #8
 800447c:	dde3      	ble.n	8004446 <__ieee754_rem_pio2f+0x10a>
 800447e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004590 <__ieee754_rem_pio2f+0x254>
 8004482:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004594 <__ieee754_rem_pio2f+0x258>
 8004486:	eef0 6a40 	vmov.f32	s13, s0
 800448a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800448e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004492:	eea6 0a27 	vfma.f32	s0, s12, s15
 8004496:	eef0 7a40 	vmov.f32	s15, s0
 800449a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800449e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80044a2:	ee15 2a90 	vmov	r2, s11
 80044a6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80044aa:	1a5b      	subs	r3, r3, r1
 80044ac:	2b19      	cmp	r3, #25
 80044ae:	dc04      	bgt.n	80044ba <__ieee754_rem_pio2f+0x17e>
 80044b0:	edc4 5a00 	vstr	s11, [r4]
 80044b4:	eeb0 0a66 	vmov.f32	s0, s13
 80044b8:	e7c6      	b.n	8004448 <__ieee754_rem_pio2f+0x10c>
 80044ba:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80045a4 <__ieee754_rem_pio2f+0x268>
 80044be:	eeb0 0a66 	vmov.f32	s0, s13
 80044c2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80044c6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80044ca:	eddf 6a37 	vldr	s13, [pc, #220]	; 80045a8 <__ieee754_rem_pio2f+0x26c>
 80044ce:	eee6 7a25 	vfma.f32	s15, s12, s11
 80044d2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80044d6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80044da:	ed84 7a00 	vstr	s14, [r4]
 80044de:	e7b3      	b.n	8004448 <__ieee754_rem_pio2f+0x10c>
 80044e0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80044e4:	db06      	blt.n	80044f4 <__ieee754_rem_pio2f+0x1b8>
 80044e6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80044ea:	edc0 7a01 	vstr	s15, [r0, #4]
 80044ee:	edc0 7a00 	vstr	s15, [r0]
 80044f2:	e733      	b.n	800435c <__ieee754_rem_pio2f+0x20>
 80044f4:	15ea      	asrs	r2, r5, #23
 80044f6:	3a86      	subs	r2, #134	; 0x86
 80044f8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004504:	eddf 6a29 	vldr	s13, [pc, #164]	; 80045ac <__ieee754_rem_pio2f+0x270>
 8004508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800450c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004510:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004514:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004518:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800451c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004524:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004528:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800452c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004534:	edcd 7a05 	vstr	s15, [sp, #20]
 8004538:	d11e      	bne.n	8004578 <__ieee754_rem_pio2f+0x23c>
 800453a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	bf14      	ite	ne
 8004544:	2302      	movne	r3, #2
 8004546:	2301      	moveq	r3, #1
 8004548:	4919      	ldr	r1, [pc, #100]	; (80045b0 <__ieee754_rem_pio2f+0x274>)
 800454a:	9101      	str	r1, [sp, #4]
 800454c:	2102      	movs	r1, #2
 800454e:	9100      	str	r1, [sp, #0]
 8004550:	a803      	add	r0, sp, #12
 8004552:	4621      	mov	r1, r4
 8004554:	f000 f892 	bl	800467c <__kernel_rem_pio2f>
 8004558:	2e00      	cmp	r6, #0
 800455a:	f6bf af1c 	bge.w	8004396 <__ieee754_rem_pio2f+0x5a>
 800455e:	edd4 7a00 	vldr	s15, [r4]
 8004562:	eef1 7a67 	vneg.f32	s15, s15
 8004566:	edc4 7a00 	vstr	s15, [r4]
 800456a:	edd4 7a01 	vldr	s15, [r4, #4]
 800456e:	eef1 7a67 	vneg.f32	s15, s15
 8004572:	edc4 7a01 	vstr	s15, [r4, #4]
 8004576:	e779      	b.n	800446c <__ieee754_rem_pio2f+0x130>
 8004578:	2303      	movs	r3, #3
 800457a:	e7e5      	b.n	8004548 <__ieee754_rem_pio2f+0x20c>
 800457c:	3f490fd8 	.word	0x3f490fd8
 8004580:	4016cbe3 	.word	0x4016cbe3
 8004584:	3fc90f80 	.word	0x3fc90f80
 8004588:	3fc90fd0 	.word	0x3fc90fd0
 800458c:	37354443 	.word	0x37354443
 8004590:	37354400 	.word	0x37354400
 8004594:	2e85a308 	.word	0x2e85a308
 8004598:	43490f80 	.word	0x43490f80
 800459c:	3f22f984 	.word	0x3f22f984
 80045a0:	08004e24 	.word	0x08004e24
 80045a4:	2e85a300 	.word	0x2e85a300
 80045a8:	248d3132 	.word	0x248d3132
 80045ac:	43800000 	.word	0x43800000
 80045b0:	08004ea4 	.word	0x08004ea4

080045b4 <__ieee754_sqrtf>:
 80045b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80045b8:	4770      	bx	lr
	...

080045bc <__kernel_cosf>:
 80045bc:	ee10 3a10 	vmov	r3, s0
 80045c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80045c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80045cc:	da05      	bge.n	80045da <__kernel_cosf+0x1e>
 80045ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80045d2:	ee17 2a90 	vmov	r2, s15
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	d03d      	beq.n	8004656 <__kernel_cosf+0x9a>
 80045da:	ee60 5a00 	vmul.f32	s11, s0, s0
 80045de:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800465c <__kernel_cosf+0xa0>
 80045e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004660 <__kernel_cosf+0xa4>
 80045e6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004664 <__kernel_cosf+0xa8>
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <__kernel_cosf+0xac>)
 80045ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80045f0:	4293      	cmp	r3, r2
 80045f2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800466c <__kernel_cosf+0xb0>
 80045f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80045fa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004670 <__kernel_cosf+0xb4>
 80045fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004602:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004674 <__kernel_cosf+0xb8>
 8004606:	eee7 7a25 	vfma.f32	s15, s14, s11
 800460a:	eeb0 7a66 	vmov.f32	s14, s13
 800460e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004612:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004616:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800461a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800461e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004622:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004626:	dc04      	bgt.n	8004632 <__kernel_cosf+0x76>
 8004628:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800462c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004630:	4770      	bx	lr
 8004632:	4a11      	ldr	r2, [pc, #68]	; (8004678 <__kernel_cosf+0xbc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	bfda      	itte	le
 8004638:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800463c:	ee06 3a90 	vmovle	s13, r3
 8004640:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004648:	ee36 0a66 	vsub.f32	s0, s12, s13
 800464c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004650:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004654:	4770      	bx	lr
 8004656:	eeb0 0a46 	vmov.f32	s0, s12
 800465a:	4770      	bx	lr
 800465c:	ad47d74e 	.word	0xad47d74e
 8004660:	310f74f6 	.word	0x310f74f6
 8004664:	3d2aaaab 	.word	0x3d2aaaab
 8004668:	3e999999 	.word	0x3e999999
 800466c:	b493f27c 	.word	0xb493f27c
 8004670:	37d00d01 	.word	0x37d00d01
 8004674:	bab60b61 	.word	0xbab60b61
 8004678:	3f480000 	.word	0x3f480000

0800467c <__kernel_rem_pio2f>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	ed2d 8b04 	vpush	{d8-d9}
 8004684:	b0d9      	sub	sp, #356	; 0x164
 8004686:	4688      	mov	r8, r1
 8004688:	9002      	str	r0, [sp, #8]
 800468a:	49bb      	ldr	r1, [pc, #748]	; (8004978 <__kernel_rem_pio2f+0x2fc>)
 800468c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004694:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004698:	1e59      	subs	r1, r3, #1
 800469a:	1d13      	adds	r3, r2, #4
 800469c:	db27      	blt.n	80046ee <__kernel_rem_pio2f+0x72>
 800469e:	f1b2 0b03 	subs.w	fp, r2, #3
 80046a2:	bf48      	it	mi
 80046a4:	f102 0b04 	addmi.w	fp, r2, #4
 80046a8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80046ac:	1c45      	adds	r5, r0, #1
 80046ae:	00ec      	lsls	r4, r5, #3
 80046b0:	1a47      	subs	r7, r0, r1
 80046b2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004988 <__kernel_rem_pio2f+0x30c>
 80046b6:	9403      	str	r4, [sp, #12]
 80046b8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80046bc:	eb0a 0c01 	add.w	ip, sl, r1
 80046c0:	ae1c      	add	r6, sp, #112	; 0x70
 80046c2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80046c6:	2400      	movs	r4, #0
 80046c8:	4564      	cmp	r4, ip
 80046ca:	dd12      	ble.n	80046f2 <__kernel_rem_pio2f+0x76>
 80046cc:	9b01      	ldr	r3, [sp, #4]
 80046ce:	ac1c      	add	r4, sp, #112	; 0x70
 80046d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80046d4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80046d8:	f04f 0c00 	mov.w	ip, #0
 80046dc:	45d4      	cmp	ip, sl
 80046de:	dc27      	bgt.n	8004730 <__kernel_rem_pio2f+0xb4>
 80046e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80046e4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004988 <__kernel_rem_pio2f+0x30c>
 80046e8:	4627      	mov	r7, r4
 80046ea:	2600      	movs	r6, #0
 80046ec:	e016      	b.n	800471c <__kernel_rem_pio2f+0xa0>
 80046ee:	2000      	movs	r0, #0
 80046f0:	e7dc      	b.n	80046ac <__kernel_rem_pio2f+0x30>
 80046f2:	42e7      	cmn	r7, r4
 80046f4:	bf5d      	ittte	pl
 80046f6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80046fa:	ee07 3a90 	vmovpl	s15, r3
 80046fe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004702:	eef0 7a47 	vmovmi.f32	s15, s14
 8004706:	ece6 7a01 	vstmia	r6!, {s15}
 800470a:	3401      	adds	r4, #1
 800470c:	e7dc      	b.n	80046c8 <__kernel_rem_pio2f+0x4c>
 800470e:	ecf9 6a01 	vldmia	r9!, {s13}
 8004712:	ed97 7a00 	vldr	s14, [r7]
 8004716:	eee6 7a87 	vfma.f32	s15, s13, s14
 800471a:	3601      	adds	r6, #1
 800471c:	428e      	cmp	r6, r1
 800471e:	f1a7 0704 	sub.w	r7, r7, #4
 8004722:	ddf4      	ble.n	800470e <__kernel_rem_pio2f+0x92>
 8004724:	eceb 7a01 	vstmia	fp!, {s15}
 8004728:	f10c 0c01 	add.w	ip, ip, #1
 800472c:	3404      	adds	r4, #4
 800472e:	e7d5      	b.n	80046dc <__kernel_rem_pio2f+0x60>
 8004730:	ab08      	add	r3, sp, #32
 8004732:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004736:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004984 <__kernel_rem_pio2f+0x308>
 800473a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004980 <__kernel_rem_pio2f+0x304>
 800473e:	9304      	str	r3, [sp, #16]
 8004740:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8004744:	4656      	mov	r6, sl
 8004746:	00b3      	lsls	r3, r6, #2
 8004748:	9305      	str	r3, [sp, #20]
 800474a:	ab58      	add	r3, sp, #352	; 0x160
 800474c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004750:	ac08      	add	r4, sp, #32
 8004752:	ab44      	add	r3, sp, #272	; 0x110
 8004754:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8004758:	46a4      	mov	ip, r4
 800475a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800475e:	4637      	mov	r7, r6
 8004760:	2f00      	cmp	r7, #0
 8004762:	f1a0 0004 	sub.w	r0, r0, #4
 8004766:	dc4f      	bgt.n	8004808 <__kernel_rem_pio2f+0x18c>
 8004768:	4628      	mov	r0, r5
 800476a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800476e:	f000 fac1 	bl	8004cf4 <scalbnf>
 8004772:	eeb0 8a40 	vmov.f32	s16, s0
 8004776:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800477a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800477e:	f000 fa71 	bl	8004c64 <floorf>
 8004782:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004786:	eea0 8a67 	vfms.f32	s16, s0, s15
 800478a:	2d00      	cmp	r5, #0
 800478c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004790:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004794:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004798:	ee17 9a90 	vmov	r9, s15
 800479c:	ee38 8a40 	vsub.f32	s16, s16, s0
 80047a0:	dd44      	ble.n	800482c <__kernel_rem_pio2f+0x1b0>
 80047a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80047a6:	ab08      	add	r3, sp, #32
 80047a8:	f1c5 0e08 	rsb	lr, r5, #8
 80047ac:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80047b0:	fa47 f00e 	asr.w	r0, r7, lr
 80047b4:	4481      	add	r9, r0
 80047b6:	fa00 f00e 	lsl.w	r0, r0, lr
 80047ba:	1a3f      	subs	r7, r7, r0
 80047bc:	f1c5 0007 	rsb	r0, r5, #7
 80047c0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80047c4:	4107      	asrs	r7, r0
 80047c6:	2f00      	cmp	r7, #0
 80047c8:	dd3f      	ble.n	800484a <__kernel_rem_pio2f+0x1ce>
 80047ca:	f04f 0e00 	mov.w	lr, #0
 80047ce:	f109 0901 	add.w	r9, r9, #1
 80047d2:	4673      	mov	r3, lr
 80047d4:	4576      	cmp	r6, lr
 80047d6:	dc6b      	bgt.n	80048b0 <__kernel_rem_pio2f+0x234>
 80047d8:	2d00      	cmp	r5, #0
 80047da:	dd04      	ble.n	80047e6 <__kernel_rem_pio2f+0x16a>
 80047dc:	2d01      	cmp	r5, #1
 80047de:	d078      	beq.n	80048d2 <__kernel_rem_pio2f+0x256>
 80047e0:	2d02      	cmp	r5, #2
 80047e2:	f000 8081 	beq.w	80048e8 <__kernel_rem_pio2f+0x26c>
 80047e6:	2f02      	cmp	r7, #2
 80047e8:	d12f      	bne.n	800484a <__kernel_rem_pio2f+0x1ce>
 80047ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80047ee:	ee30 8a48 	vsub.f32	s16, s0, s16
 80047f2:	b353      	cbz	r3, 800484a <__kernel_rem_pio2f+0x1ce>
 80047f4:	4628      	mov	r0, r5
 80047f6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80047fa:	f000 fa7b 	bl	8004cf4 <scalbnf>
 80047fe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004802:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004806:	e020      	b.n	800484a <__kernel_rem_pio2f+0x1ce>
 8004808:	ee60 7a28 	vmul.f32	s15, s0, s17
 800480c:	3f01      	subs	r7, #1
 800480e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004816:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800481a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800481e:	ecac 0a01 	vstmia	ip!, {s0}
 8004822:	ed90 0a00 	vldr	s0, [r0]
 8004826:	ee37 0a80 	vadd.f32	s0, s15, s0
 800482a:	e799      	b.n	8004760 <__kernel_rem_pio2f+0xe4>
 800482c:	d105      	bne.n	800483a <__kernel_rem_pio2f+0x1be>
 800482e:	1e70      	subs	r0, r6, #1
 8004830:	ab08      	add	r3, sp, #32
 8004832:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004836:	11ff      	asrs	r7, r7, #7
 8004838:	e7c5      	b.n	80047c6 <__kernel_rem_pio2f+0x14a>
 800483a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800483e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004846:	da31      	bge.n	80048ac <__kernel_rem_pio2f+0x230>
 8004848:	2700      	movs	r7, #0
 800484a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	f040 809b 	bne.w	800498c <__kernel_rem_pio2f+0x310>
 8004856:	1e74      	subs	r4, r6, #1
 8004858:	46a4      	mov	ip, r4
 800485a:	2000      	movs	r0, #0
 800485c:	45d4      	cmp	ip, sl
 800485e:	da4a      	bge.n	80048f6 <__kernel_rem_pio2f+0x27a>
 8004860:	2800      	cmp	r0, #0
 8004862:	d07a      	beq.n	800495a <__kernel_rem_pio2f+0x2de>
 8004864:	ab08      	add	r3, sp, #32
 8004866:	3d08      	subs	r5, #8
 8004868:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8081 	beq.w	8004974 <__kernel_rem_pio2f+0x2f8>
 8004872:	4628      	mov	r0, r5
 8004874:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004878:	00a5      	lsls	r5, r4, #2
 800487a:	f000 fa3b 	bl	8004cf4 <scalbnf>
 800487e:	aa44      	add	r2, sp, #272	; 0x110
 8004880:	1d2b      	adds	r3, r5, #4
 8004882:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004984 <__kernel_rem_pio2f+0x308>
 8004886:	18d1      	adds	r1, r2, r3
 8004888:	4622      	mov	r2, r4
 800488a:	2a00      	cmp	r2, #0
 800488c:	f280 80ae 	bge.w	80049ec <__kernel_rem_pio2f+0x370>
 8004890:	4622      	mov	r2, r4
 8004892:	2a00      	cmp	r2, #0
 8004894:	f2c0 80cc 	blt.w	8004a30 <__kernel_rem_pio2f+0x3b4>
 8004898:	a944      	add	r1, sp, #272	; 0x110
 800489a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800489e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800497c <__kernel_rem_pio2f+0x300>
 80048a2:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004988 <__kernel_rem_pio2f+0x30c>
 80048a6:	2000      	movs	r0, #0
 80048a8:	1aa1      	subs	r1, r4, r2
 80048aa:	e0b6      	b.n	8004a1a <__kernel_rem_pio2f+0x39e>
 80048ac:	2702      	movs	r7, #2
 80048ae:	e78c      	b.n	80047ca <__kernel_rem_pio2f+0x14e>
 80048b0:	6820      	ldr	r0, [r4, #0]
 80048b2:	b94b      	cbnz	r3, 80048c8 <__kernel_rem_pio2f+0x24c>
 80048b4:	b118      	cbz	r0, 80048be <__kernel_rem_pio2f+0x242>
 80048b6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80048ba:	6020      	str	r0, [r4, #0]
 80048bc:	2001      	movs	r0, #1
 80048be:	f10e 0e01 	add.w	lr, lr, #1
 80048c2:	3404      	adds	r4, #4
 80048c4:	4603      	mov	r3, r0
 80048c6:	e785      	b.n	80047d4 <__kernel_rem_pio2f+0x158>
 80048c8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80048cc:	6020      	str	r0, [r4, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	e7f5      	b.n	80048be <__kernel_rem_pio2f+0x242>
 80048d2:	1e74      	subs	r4, r6, #1
 80048d4:	a808      	add	r0, sp, #32
 80048d6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80048da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80048de:	f10d 0c20 	add.w	ip, sp, #32
 80048e2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80048e6:	e77e      	b.n	80047e6 <__kernel_rem_pio2f+0x16a>
 80048e8:	1e74      	subs	r4, r6, #1
 80048ea:	a808      	add	r0, sp, #32
 80048ec:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80048f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80048f4:	e7f3      	b.n	80048de <__kernel_rem_pio2f+0x262>
 80048f6:	ab08      	add	r3, sp, #32
 80048f8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80048fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004900:	4318      	orrs	r0, r3
 8004902:	e7ab      	b.n	800485c <__kernel_rem_pio2f+0x1e0>
 8004904:	f10c 0c01 	add.w	ip, ip, #1
 8004908:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800490c:	2c00      	cmp	r4, #0
 800490e:	d0f9      	beq.n	8004904 <__kernel_rem_pio2f+0x288>
 8004910:	9b05      	ldr	r3, [sp, #20]
 8004912:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004916:	eb0d 0003 	add.w	r0, sp, r3
 800491a:	9b01      	ldr	r3, [sp, #4]
 800491c:	18f4      	adds	r4, r6, r3
 800491e:	ab1c      	add	r3, sp, #112	; 0x70
 8004920:	1c77      	adds	r7, r6, #1
 8004922:	384c      	subs	r0, #76	; 0x4c
 8004924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004928:	4466      	add	r6, ip
 800492a:	42be      	cmp	r6, r7
 800492c:	f6ff af0b 	blt.w	8004746 <__kernel_rem_pio2f+0xca>
 8004930:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004934:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004940:	f04f 0c00 	mov.w	ip, #0
 8004944:	ece4 7a01 	vstmia	r4!, {s15}
 8004948:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004988 <__kernel_rem_pio2f+0x30c>
 800494c:	46a1      	mov	r9, r4
 800494e:	458c      	cmp	ip, r1
 8004950:	dd07      	ble.n	8004962 <__kernel_rem_pio2f+0x2e6>
 8004952:	ece0 7a01 	vstmia	r0!, {s15}
 8004956:	3701      	adds	r7, #1
 8004958:	e7e7      	b.n	800492a <__kernel_rem_pio2f+0x2ae>
 800495a:	9804      	ldr	r0, [sp, #16]
 800495c:	f04f 0c01 	mov.w	ip, #1
 8004960:	e7d2      	b.n	8004908 <__kernel_rem_pio2f+0x28c>
 8004962:	ecfe 6a01 	vldmia	lr!, {s13}
 8004966:	ed39 7a01 	vldmdb	r9!, {s14}
 800496a:	f10c 0c01 	add.w	ip, ip, #1
 800496e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004972:	e7ec      	b.n	800494e <__kernel_rem_pio2f+0x2d2>
 8004974:	3c01      	subs	r4, #1
 8004976:	e775      	b.n	8004864 <__kernel_rem_pio2f+0x1e8>
 8004978:	080051e8 	.word	0x080051e8
 800497c:	080051bc 	.word	0x080051bc
 8004980:	43800000 	.word	0x43800000
 8004984:	3b800000 	.word	0x3b800000
 8004988:	00000000 	.word	0x00000000
 800498c:	9b03      	ldr	r3, [sp, #12]
 800498e:	eeb0 0a48 	vmov.f32	s0, s16
 8004992:	1a98      	subs	r0, r3, r2
 8004994:	f000 f9ae 	bl	8004cf4 <scalbnf>
 8004998:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004980 <__kernel_rem_pio2f+0x304>
 800499c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	db19      	blt.n	80049da <__kernel_rem_pio2f+0x35e>
 80049a6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004984 <__kernel_rem_pio2f+0x308>
 80049aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80049ae:	aa08      	add	r2, sp, #32
 80049b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b4:	1c74      	adds	r4, r6, #1
 80049b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ba:	3508      	adds	r5, #8
 80049bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80049c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80049c8:	ee10 3a10 	vmov	r3, s0
 80049cc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80049d0:	ee17 3a90 	vmov	r3, s15
 80049d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80049d8:	e74b      	b.n	8004872 <__kernel_rem_pio2f+0x1f6>
 80049da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80049de:	aa08      	add	r2, sp, #32
 80049e0:	ee10 3a10 	vmov	r3, s0
 80049e4:	4634      	mov	r4, r6
 80049e6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80049ea:	e742      	b.n	8004872 <__kernel_rem_pio2f+0x1f6>
 80049ec:	a808      	add	r0, sp, #32
 80049ee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80049f2:	9001      	str	r0, [sp, #4]
 80049f4:	ee07 0a90 	vmov	s15, r0
 80049f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049fc:	3a01      	subs	r2, #1
 80049fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004a02:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004a06:	ed61 7a01 	vstmdb	r1!, {s15}
 8004a0a:	e73e      	b.n	800488a <__kernel_rem_pio2f+0x20e>
 8004a0c:	ecfc 6a01 	vldmia	ip!, {s13}
 8004a10:	ecb6 7a01 	vldmia	r6!, {s14}
 8004a14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004a18:	3001      	adds	r0, #1
 8004a1a:	4550      	cmp	r0, sl
 8004a1c:	dc01      	bgt.n	8004a22 <__kernel_rem_pio2f+0x3a6>
 8004a1e:	4288      	cmp	r0, r1
 8004a20:	ddf4      	ble.n	8004a0c <__kernel_rem_pio2f+0x390>
 8004a22:	a858      	add	r0, sp, #352	; 0x160
 8004a24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004a28:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004a2c:	3a01      	subs	r2, #1
 8004a2e:	e730      	b.n	8004892 <__kernel_rem_pio2f+0x216>
 8004a30:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8004a32:	2a02      	cmp	r2, #2
 8004a34:	dc09      	bgt.n	8004a4a <__kernel_rem_pio2f+0x3ce>
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	dc2a      	bgt.n	8004a90 <__kernel_rem_pio2f+0x414>
 8004a3a:	d043      	beq.n	8004ac4 <__kernel_rem_pio2f+0x448>
 8004a3c:	f009 0007 	and.w	r0, r9, #7
 8004a40:	b059      	add	sp, #356	; 0x164
 8004a42:	ecbd 8b04 	vpop	{d8-d9}
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d1f5      	bne.n	8004a3c <__kernel_rem_pio2f+0x3c0>
 8004a50:	ab30      	add	r3, sp, #192	; 0xc0
 8004a52:	442b      	add	r3, r5
 8004a54:	461a      	mov	r2, r3
 8004a56:	4619      	mov	r1, r3
 8004a58:	4620      	mov	r0, r4
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f1a1 0104 	sub.w	r1, r1, #4
 8004a60:	dc51      	bgt.n	8004b06 <__kernel_rem_pio2f+0x48a>
 8004a62:	4621      	mov	r1, r4
 8004a64:	2901      	cmp	r1, #1
 8004a66:	f1a2 0204 	sub.w	r2, r2, #4
 8004a6a:	dc5c      	bgt.n	8004b26 <__kernel_rem_pio2f+0x4aa>
 8004a6c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004988 <__kernel_rem_pio2f+0x30c>
 8004a70:	3304      	adds	r3, #4
 8004a72:	2c01      	cmp	r4, #1
 8004a74:	dc67      	bgt.n	8004b46 <__kernel_rem_pio2f+0x4ca>
 8004a76:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004a7a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004a7e:	2f00      	cmp	r7, #0
 8004a80:	d167      	bne.n	8004b52 <__kernel_rem_pio2f+0x4d6>
 8004a82:	edc8 6a00 	vstr	s13, [r8]
 8004a86:	ed88 7a01 	vstr	s14, [r8, #4]
 8004a8a:	edc8 7a02 	vstr	s15, [r8, #8]
 8004a8e:	e7d5      	b.n	8004a3c <__kernel_rem_pio2f+0x3c0>
 8004a90:	aa30      	add	r2, sp, #192	; 0xc0
 8004a92:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004988 <__kernel_rem_pio2f+0x30c>
 8004a96:	4413      	add	r3, r2
 8004a98:	4622      	mov	r2, r4
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	da24      	bge.n	8004ae8 <__kernel_rem_pio2f+0x46c>
 8004a9e:	b34f      	cbz	r7, 8004af4 <__kernel_rem_pio2f+0x478>
 8004aa0:	eef1 7a47 	vneg.f32	s15, s14
 8004aa4:	edc8 7a00 	vstr	s15, [r8]
 8004aa8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004aac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ab0:	aa31      	add	r2, sp, #196	; 0xc4
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	da20      	bge.n	8004afa <__kernel_rem_pio2f+0x47e>
 8004ab8:	b10f      	cbz	r7, 8004abe <__kernel_rem_pio2f+0x442>
 8004aba:	eef1 7a67 	vneg.f32	s15, s15
 8004abe:	edc8 7a01 	vstr	s15, [r8, #4]
 8004ac2:	e7bb      	b.n	8004a3c <__kernel_rem_pio2f+0x3c0>
 8004ac4:	aa30      	add	r2, sp, #192	; 0xc0
 8004ac6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004988 <__kernel_rem_pio2f+0x30c>
 8004aca:	4413      	add	r3, r2
 8004acc:	2c00      	cmp	r4, #0
 8004ace:	da05      	bge.n	8004adc <__kernel_rem_pio2f+0x460>
 8004ad0:	b10f      	cbz	r7, 8004ad6 <__kernel_rem_pio2f+0x45a>
 8004ad2:	eef1 7a67 	vneg.f32	s15, s15
 8004ad6:	edc8 7a00 	vstr	s15, [r8]
 8004ada:	e7af      	b.n	8004a3c <__kernel_rem_pio2f+0x3c0>
 8004adc:	ed33 7a01 	vldmdb	r3!, {s14}
 8004ae0:	3c01      	subs	r4, #1
 8004ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ae6:	e7f1      	b.n	8004acc <__kernel_rem_pio2f+0x450>
 8004ae8:	ed73 7a01 	vldmdb	r3!, {s15}
 8004aec:	3a01      	subs	r2, #1
 8004aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004af2:	e7d2      	b.n	8004a9a <__kernel_rem_pio2f+0x41e>
 8004af4:	eef0 7a47 	vmov.f32	s15, s14
 8004af8:	e7d4      	b.n	8004aa4 <__kernel_rem_pio2f+0x428>
 8004afa:	ecb2 7a01 	vldmia	r2!, {s14}
 8004afe:	3301      	adds	r3, #1
 8004b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b04:	e7d6      	b.n	8004ab4 <__kernel_rem_pio2f+0x438>
 8004b06:	edd1 7a00 	vldr	s15, [r1]
 8004b0a:	edd1 6a01 	vldr	s13, [r1, #4]
 8004b0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004b12:	3801      	subs	r0, #1
 8004b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b18:	ed81 7a00 	vstr	s14, [r1]
 8004b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b20:	edc1 7a01 	vstr	s15, [r1, #4]
 8004b24:	e799      	b.n	8004a5a <__kernel_rem_pio2f+0x3de>
 8004b26:	edd2 7a00 	vldr	s15, [r2]
 8004b2a:	edd2 6a01 	vldr	s13, [r2, #4]
 8004b2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004b32:	3901      	subs	r1, #1
 8004b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b38:	ed82 7a00 	vstr	s14, [r2]
 8004b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b40:	edc2 7a01 	vstr	s15, [r2, #4]
 8004b44:	e78e      	b.n	8004a64 <__kernel_rem_pio2f+0x3e8>
 8004b46:	ed33 7a01 	vldmdb	r3!, {s14}
 8004b4a:	3c01      	subs	r4, #1
 8004b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b50:	e78f      	b.n	8004a72 <__kernel_rem_pio2f+0x3f6>
 8004b52:	eef1 6a66 	vneg.f32	s13, s13
 8004b56:	eeb1 7a47 	vneg.f32	s14, s14
 8004b5a:	edc8 6a00 	vstr	s13, [r8]
 8004b5e:	ed88 7a01 	vstr	s14, [r8, #4]
 8004b62:	eef1 7a67 	vneg.f32	s15, s15
 8004b66:	e790      	b.n	8004a8a <__kernel_rem_pio2f+0x40e>

08004b68 <__kernel_sinf>:
 8004b68:	ee10 3a10 	vmov	r3, s0
 8004b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004b74:	da04      	bge.n	8004b80 <__kernel_sinf+0x18>
 8004b76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004b7a:	ee17 3a90 	vmov	r3, s15
 8004b7e:	b35b      	cbz	r3, 8004bd8 <__kernel_sinf+0x70>
 8004b80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004b84:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004bdc <__kernel_sinf+0x74>
 8004b88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004be0 <__kernel_sinf+0x78>
 8004b8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004b90:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004be4 <__kernel_sinf+0x7c>
 8004b94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004b98:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004be8 <__kernel_sinf+0x80>
 8004b9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004ba0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004bec <__kernel_sinf+0x84>
 8004ba4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004ba8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004bac:	b930      	cbnz	r0, 8004bbc <__kernel_sinf+0x54>
 8004bae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004bf0 <__kernel_sinf+0x88>
 8004bb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004bb6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004bba:	4770      	bx	lr
 8004bbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004bc0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004bc4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004bc8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004bcc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004bf4 <__kernel_sinf+0x8c>
 8004bd0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004bd4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	2f2ec9d3 	.word	0x2f2ec9d3
 8004be0:	b2d72f34 	.word	0xb2d72f34
 8004be4:	3638ef1b 	.word	0x3638ef1b
 8004be8:	b9500d01 	.word	0xb9500d01
 8004bec:	3c088889 	.word	0x3c088889
 8004bf0:	be2aaaab 	.word	0xbe2aaaab
 8004bf4:	3e2aaaab 	.word	0x3e2aaaab

08004bf8 <with_errnof>:
 8004bf8:	b513      	push	{r0, r1, r4, lr}
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004c00:	f7fe fece 	bl	80039a0 <__errno>
 8004c04:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004c08:	6004      	str	r4, [r0, #0]
 8004c0a:	b002      	add	sp, #8
 8004c0c:	bd10      	pop	{r4, pc}

08004c0e <xflowf>:
 8004c0e:	b130      	cbz	r0, 8004c1e <xflowf+0x10>
 8004c10:	eef1 7a40 	vneg.f32	s15, s0
 8004c14:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004c18:	2022      	movs	r0, #34	; 0x22
 8004c1a:	f7ff bfed 	b.w	8004bf8 <with_errnof>
 8004c1e:	eef0 7a40 	vmov.f32	s15, s0
 8004c22:	e7f7      	b.n	8004c14 <xflowf+0x6>

08004c24 <__math_uflowf>:
 8004c24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004c2c <__math_uflowf+0x8>
 8004c28:	f7ff bff1 	b.w	8004c0e <xflowf>
 8004c2c:	10000000 	.word	0x10000000

08004c30 <__math_oflowf>:
 8004c30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004c38 <__math_oflowf+0x8>
 8004c34:	f7ff bfeb 	b.w	8004c0e <xflowf>
 8004c38:	70000000 	.word	0x70000000

08004c3c <fabsf>:
 8004c3c:	ee10 3a10 	vmov	r3, s0
 8004c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c44:	ee00 3a10 	vmov	s0, r3
 8004c48:	4770      	bx	lr

08004c4a <finitef>:
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004c50:	9801      	ldr	r0, [sp, #4]
 8004c52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c56:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004c5a:	bfac      	ite	ge
 8004c5c:	2000      	movge	r0, #0
 8004c5e:	2001      	movlt	r0, #1
 8004c60:	b002      	add	sp, #8
 8004c62:	4770      	bx	lr

08004c64 <floorf>:
 8004c64:	ee10 3a10 	vmov	r3, s0
 8004c68:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004c6c:	3a7f      	subs	r2, #127	; 0x7f
 8004c6e:	2a16      	cmp	r2, #22
 8004c70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004c74:	dc2a      	bgt.n	8004ccc <floorf+0x68>
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	da11      	bge.n	8004c9e <floorf+0x3a>
 8004c7a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004cdc <floorf+0x78>
 8004c7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004c82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8a:	dd05      	ble.n	8004c98 <floorf+0x34>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	da23      	bge.n	8004cd8 <floorf+0x74>
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <floorf+0x7c>)
 8004c92:	2900      	cmp	r1, #0
 8004c94:	bf18      	it	ne
 8004c96:	4613      	movne	r3, r2
 8004c98:	ee00 3a10 	vmov	s0, r3
 8004c9c:	4770      	bx	lr
 8004c9e:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <floorf+0x80>)
 8004ca0:	4111      	asrs	r1, r2
 8004ca2:	420b      	tst	r3, r1
 8004ca4:	d0fa      	beq.n	8004c9c <floorf+0x38>
 8004ca6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004cdc <floorf+0x78>
 8004caa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004cae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb6:	ddef      	ble.n	8004c98 <floorf+0x34>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bfbe      	ittt	lt
 8004cbc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004cc0:	fa40 f202 	asrlt.w	r2, r0, r2
 8004cc4:	189b      	addlt	r3, r3, r2
 8004cc6:	ea23 0301 	bic.w	r3, r3, r1
 8004cca:	e7e5      	b.n	8004c98 <floorf+0x34>
 8004ccc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004cd0:	d3e4      	bcc.n	8004c9c <floorf+0x38>
 8004cd2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004cd6:	4770      	bx	lr
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e7dd      	b.n	8004c98 <floorf+0x34>
 8004cdc:	7149f2ca 	.word	0x7149f2ca
 8004ce0:	bf800000 	.word	0xbf800000
 8004ce4:	007fffff 	.word	0x007fffff

08004ce8 <nanf>:
 8004ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004cf0 <nanf+0x8>
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	7fc00000 	.word	0x7fc00000

08004cf4 <scalbnf>:
 8004cf4:	ee10 3a10 	vmov	r3, s0
 8004cf8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004cfc:	d025      	beq.n	8004d4a <scalbnf+0x56>
 8004cfe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004d02:	d302      	bcc.n	8004d0a <scalbnf+0x16>
 8004d04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004d08:	4770      	bx	lr
 8004d0a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004d0e:	d122      	bne.n	8004d56 <scalbnf+0x62>
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <scalbnf+0xc8>)
 8004d12:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004dc0 <scalbnf+0xcc>
 8004d16:	4298      	cmp	r0, r3
 8004d18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004d1c:	db16      	blt.n	8004d4c <scalbnf+0x58>
 8004d1e:	ee10 3a10 	vmov	r3, s0
 8004d22:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d26:	3a19      	subs	r2, #25
 8004d28:	4402      	add	r2, r0
 8004d2a:	2afe      	cmp	r2, #254	; 0xfe
 8004d2c:	dd15      	ble.n	8004d5a <scalbnf+0x66>
 8004d2e:	ee10 3a10 	vmov	r3, s0
 8004d32:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004dc4 <scalbnf+0xd0>
 8004d36:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004dc8 <scalbnf+0xd4>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	eeb0 7a67 	vmov.f32	s14, s15
 8004d40:	bfb8      	it	lt
 8004d42:	eef0 7a66 	vmovlt.f32	s15, s13
 8004d46:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004d4a:	4770      	bx	lr
 8004d4c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004dcc <scalbnf+0xd8>
 8004d50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004d54:	4770      	bx	lr
 8004d56:	0dd2      	lsrs	r2, r2, #23
 8004d58:	e7e6      	b.n	8004d28 <scalbnf+0x34>
 8004d5a:	2a00      	cmp	r2, #0
 8004d5c:	dd06      	ble.n	8004d6c <scalbnf+0x78>
 8004d5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d62:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004d66:	ee00 3a10 	vmov	s0, r3
 8004d6a:	4770      	bx	lr
 8004d6c:	f112 0f16 	cmn.w	r2, #22
 8004d70:	da1a      	bge.n	8004da8 <scalbnf+0xb4>
 8004d72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004d76:	4298      	cmp	r0, r3
 8004d78:	ee10 3a10 	vmov	r3, s0
 8004d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d80:	dd0a      	ble.n	8004d98 <scalbnf+0xa4>
 8004d82:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004dc4 <scalbnf+0xd0>
 8004d86:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004dc8 <scalbnf+0xd4>
 8004d8a:	eef0 7a40 	vmov.f32	s15, s0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf18      	it	ne
 8004d92:	eeb0 0a47 	vmovne.f32	s0, s14
 8004d96:	e7db      	b.n	8004d50 <scalbnf+0x5c>
 8004d98:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004dcc <scalbnf+0xd8>
 8004d9c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004dd0 <scalbnf+0xdc>
 8004da0:	eef0 7a40 	vmov.f32	s15, s0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	e7f3      	b.n	8004d90 <scalbnf+0x9c>
 8004da8:	3219      	adds	r2, #25
 8004daa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004dae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004db2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004dd4 <scalbnf+0xe0>
 8004db6:	ee07 3a10 	vmov	s14, r3
 8004dba:	e7c4      	b.n	8004d46 <scalbnf+0x52>
 8004dbc:	ffff3cb0 	.word	0xffff3cb0
 8004dc0:	4c000000 	.word	0x4c000000
 8004dc4:	7149f2ca 	.word	0x7149f2ca
 8004dc8:	f149f2ca 	.word	0xf149f2ca
 8004dcc:	0da24260 	.word	0x0da24260
 8004dd0:	8da24260 	.word	0x8da24260
 8004dd4:	33000000 	.word	0x33000000

08004dd8 <_init>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr

08004de4 <_fini>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	bf00      	nop
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr
